name: build_action

on: workflow_dispatch

jobs:
  build_env:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: login aliyun
        run: |
          sudo docker login --username=${{ secrets.ALINAME }} --password=${{ secrets.ALIPASSWORD }}  registry.cn-hangzhou.aliyuncs.com

  build_host:
    runs-on: ubuntu-latest
    needs: build_env

    steps:
      - name: Build Sunblog_host Images
        run: |
          echo "Current Working Directory: $(pwd)"
          image_name="${{ secrets.USERNAME }}/sunblog"
          tag_name="${{secrets.IMAGETAG}}"
          if docker images | grep $image_name:$tag_name > /dev/null; then
           docker rmi $image_name:$tag_name
          fi
          echo "Current Working Directory: $(pwd)"
          sudo docker build -t $image_name:$tag_name -f ${{ secrets.HOSTDOCKERFILE }} .

      - name: Build and push ALI Host
        id: ALI_build_host
        run: |
          image_name="${{ secrets.USERNAME }}/sunblog"
          tag_name="${{secrets.IMAGETAG}}"
          sudo docker tag  $image_name:$tag_name registry.cn-hangzhou.aliyuncs.com/learn-zhou/zhou-learn:$tag_name
          sudo docker push registry.cn-hangzhou.aliyuncs.com/learn-zhou/zhou-learn:$tag_name

  build_admin:
    runs-on: ubuntu-latest
    needs: build_env

    steps:
      - name: Build Docker SunBlogAdmin Image
        run: |
          ls -al
          image_name="${{ secrets.USERNAME }}/sunblogadmin"
          tag_name="${{secrets.VUETAG}}"
          if docker images | grep $image_name:$tag_name > /dev/null; then
           docker rmi $image_name:$tag_name
          fi
          sudo docker build -t $image_name:$tag_name -f ${{ secrets.ADMINDOCKERFILEVUE }} .

      - name: Build and push ALI Admin
        id: ALI_build_admin
        run: |
          image_name="${{ secrets.USERNAME }}/sunblogadmin"
          tag_name="${{secrets.VUETAG}}"
          sudo docker tag  $image_name:$tag_name registry.cn-hangzhou.aliyuncs.com/learn-zhou/zhou-learn:$tag_name
          sudo docker push registry.cn-hangzhou.aliyuncs.com/learn-zhou/zhou-learn:$tag_name

  build_vue:
    runs-on: ubuntu-latest
    needs: build_env

    steps:
      - name: Build Docker Image
        run: |
          image_name="${{ secrets.USERNAME }}/sunblog"
          tag_name="${{secrets.VUETAG}}"
          if docker images | grep $image_name:$tag_name > /dev/null; then
           docker rmi $image_name:$tag_name
          fi
          sudo docker build -t $image_name:$tag_name -f ${{ secrets.VUEDOCKERFILEVUE }} .

      - name: Build and push ALI Vue
        id: ALI_build_vue
        run: |
          image_name="${{ secrets.USERNAME }}/sunblog"
          tag_name="${{secrets.VUETAG}}"
          sudo docker tag  $image_name:$tag_name registry.cn-hangzhou.aliyuncs.com/learn-zhou/zhou-learn:$tag_name
          sudo docker push registry.cn-hangzhou.aliyuncs.com/learn-zhou/zhou-learn:$tag_name

  deploy:
    needs: [build_host, build_admin, build_vue]
    runs-on: self-hosted
    steps:
      - name: login aliyun
        run: |
          sudo docker login --username=${{ secrets.ALINAME }} --password=${{ secrets.ALIPASSWORD }}  registry.cn-hangzhou.aliyuncs.com
      - name: check container
        run: |
          container_name="hostblog"
          tag_name="${{secrets.IMAGETAG}}"
          if docker ps -a | grep $container_name > /dev/null ; then
            echo "Docker container already exists, removing..."        
            docker stop $container_name
            docker rm $container_name
          fi
      - name: Pull ALI Image
        run: |
          image_name="${{ secrets.ALIREPOSITORY }}"
          tag_name="${{secrets.IMAGETAG}}"
          if docker images | grep $image_name:$tag_name > /dev/null; then
           docker rmi $image_name:$tag_name
          fi
          sudo  docker pull ${{ secrets.ALIREPOSITORY }}:$tag_name

      - name: Run Docker container
        run: |
          container_name="hostblog"
          tag_name="${{secrets.IMAGETAG}}"
          sudo docker run --name $container_name --restart=always -itd -p ${{secrets.PORT}}:80 -e ASPNETCORE_HTTP_PORTS=80 ${{ secrets.ALIREPOSITORY }}:$tag_name
