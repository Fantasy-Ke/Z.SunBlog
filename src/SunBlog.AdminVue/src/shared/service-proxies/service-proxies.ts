//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import moment from 'moment';

class ErrorInfo {
	message: any;
	init(_data?: any) {
		if (_data) {
			this.message = _data['message'];
		}
	}

	static fromJS(data: any): ErrorInfo {
		data = typeof data === 'object' ? data : {};
		let result = new ErrorInfo();
		result.init(data);
		return result;
	}

	toJSON(data?: any) {
		data = typeof data === 'object' ? data : {};
		data['message'] = this.message;
		return data;
	}
}
class ZResponseBase {
	statusCode: number;
	error: ErrorInfo;
	unAuthorizedRequest: boolean;
	extras: any;
	success: boolean;

	init(_data?: any) {
		if (_data) {
			this.statusCode = _data['statusCode'];
			this.error = ErrorInfo.fromJS(_data['error']);
			this.unAuthorizedRequest = _data['unAuthorizedRequest'];
			this.extras = _data['extras'];
			this.success = _data['success'];
		}
	}

	static fromJS(data: any): ZResponseBase {
		data = typeof data === 'object' ? data : {};
		let result = new ZResponseBase();
		result.init(data);
		return result;
	}

	toJSON(data?: any) {
		data = typeof data === 'object' ? data : {};
		data['statusCode'] = this.statusCode;
		data['error'] = this.error;
		data['unAuthorizedRequest'] = this.unAuthorizedRequest;
		data['extras'] = this.extras;
		data['success'] = this.success;
		return data;
	}
}
export class ZEngineResponse<T = any> extends ZResponseBase {
	result: T;
}


export class AlbumsCsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 相册列表
     * @param body (optional) 
     * @return Success
     */
    getList(body: Pagination | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<AlbumsOutputPageResult>> {
        let url_ = this.baseUrl + "/api/AlbumsCs/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ZEngineResponse<AlbumsOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = AlbumsOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<AlbumsOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<AlbumsOutputPageResult>>(null as any);
    }

    /**
     * 相册下的图片
     * @param albumId (optional) 相册ID
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    pictures(albumId: string | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<PictureOutputPageResult>> {
        let url_ = this.baseUrl + "/api/AlbumsCs/Pictures?";
        if (albumId === null)
            throw new Error("The parameter 'albumId' cannot be null.");
        else if (albumId !== undefined)
            url_ += "AlbumId=" + encodeURIComponent("" + albumId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPictures(_response);
        });
    }

    protected processPictures(response: AxiosResponse): Promise<ZEngineResponse<PictureOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = PictureOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<PictureOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<PictureOutputPageResult>>(null as any);
    }
}

export class AlbumsSsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加修改
     * @param body (optional) 
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateAlbumsInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/AlbumsSs/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除菜单/按钮
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/AlbumsSs/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 相册列表分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: AlbumsPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<AlbumsPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/AlbumsSs/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<AlbumsPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = AlbumsPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<AlbumsPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<AlbumsPageOutputPageResult>>(null as any);
    }
}

export class ArticleCategorysServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加文章所属栏目
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateOrUpdateArticleCategoryDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/ArticleCategorys/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 更新文章所属栏目
     * @param body (optional) 
     * @return Success
     */
    update(body: CreateOrUpdateArticleCategoryDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/ArticleCategorys/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class ArticleCsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 文章栏目分类
     * @return Success
     */
    categories( cancelToken?: CancelToken): Promise<ZEngineResponse<CategoryOutput[]>> {
        let url_ = this.baseUrl + "/api/ArticleCs/Categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCategories(_response);
        });
    }

    protected processCategories(response: AxiosResponse): Promise<ZEngineResponse<CategoryOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CategoryOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<CategoryOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<CategoryOutput[]>>(null as any);
    }

    /**
     * 文章表查询
     * @param body (optional) 
     * @return Success
     */
    getList(body: ArticleListQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleOutputPageResult>> {
        let url_ = this.baseUrl + "/api/ArticleCs/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ZEngineResponse<ArticleOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticleOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleOutputPageResult>>(null as any);
    }

    /**
     * 文章详情
     * @param id (optional) 文章ID
     * @return Success
     */
    info(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleInfoOutput>> {
        let url_ = this.baseUrl + "/api/ArticleCs/Info?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInfo(_response);
        });
    }

    protected processInfo(response: AxiosResponse): Promise<ZEngineResponse<ArticleInfoOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticleInfoOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleInfoOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleInfoOutput>>(null as any);
    }

    /**
     * 最新5片文章
     * @return Success
     */
    latest( cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleBasicsOutput[]>> {
        let url_ = this.baseUrl + "/api/ArticleCs/Latest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLatest(_response);
        });
    }

    protected processLatest(response: AxiosResponse): Promise<ZEngineResponse<ArticleBasicsOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ArticleBasicsOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleBasicsOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleBasicsOutput[]>>(null as any);
    }

    /**
     * 文章信息统计
     * @return Success
     */
    reportStatistics( cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleReportOutput>> {
        let url_ = this.baseUrl + "/api/ArticleCs/ReportStatistics";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReportStatistics(_response);
        });
    }

    protected processReportStatistics(response: AxiosResponse): Promise<ZEngineResponse<ArticleReportOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticleReportOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleReportOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleReportOutput>>(null as any);
    }

    /**
     * 标签列表
     * @return Success
     */
    tags( cancelToken?: CancelToken): Promise<ZEngineResponse<TagsOutput[]>> {
        let url_ = this.baseUrl + "/api/ArticleCs/Tags";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTags(_response);
        });
    }

    protected processTags(response: AxiosResponse): Promise<ZEngineResponse<TagsOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(TagsOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TagsOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TagsOutput[]>>(null as any);
    }
}

export class ArticleSsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加修改
     * @param body (optional) 
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateArticleInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/ArticleSs/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除
     * @param body (optional) 
     * @return Success
     */
    delete(body: KeyDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/ArticleSs/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 查询详细
     * @param id (optional) 
     * @return Success
     */
    getDetail(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleDetailOutput>> {
        let url_ = this.baseUrl + "/api/ArticleSs/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDetail(_response);
        });
    }

    protected processGetDetail(response: AxiosResponse): Promise<ZEngineResponse<ArticleDetailOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticleDetailOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleDetailOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleDetailOutput>>(null as any);
    }

    /**
     * 文章列表分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: ArticlePageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ArticlePageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/ArticleSs/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<ArticlePageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticlePageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticlePageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticlePageOutputPageResult>>(null as any);
    }
}

export class AuthAccountsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 删除博客用户
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/AuthAccounts/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 博客授权用户列表
     * @param body (optional) 
     * @return Success
     */
    getList(body: AuthAccountPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<AuthAccountPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/AuthAccounts/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ZEngineResponse<AuthAccountPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = AuthAccountPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<AuthAccountPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<AuthAccountPageOutputPageResult>>(null as any);
    }

    /**
     * 设置博主
     * @param id (optional) 
     * @return Success
     */
    setBlogger(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/AuthAccounts/SetBlogger?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PATCH",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetBlogger(_response);
        });
    }

    protected processSetBlogger(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class AuthsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 获取验证码
     * @param id (optional) 验证码唯一id
     * @return Success
     */
    captcha(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Auths/Captcha?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCaptcha(_response);
        });
    }

    protected processCaptcha(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 刷新token
     * @param body (optional) 
     * @return Success
     */
    refreshToken(body: ZFantasyToken | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ZFantasyToken>> {
        let url_ = this.baseUrl + "/api/Auths/RefreshToken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRefreshToken(_response);
        });
    }

    protected processRefreshToken(response: AxiosResponse): Promise<ZEngineResponse<ZFantasyToken>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ZFantasyToken.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZFantasyToken>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZFantasyToken>>(null as any);
    }

    /**
     * 系统用户登录
     * @param body (optional) 
     * @return Success
     */
    signIn(body: ZUserInfoDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ZFantasyToken>> {
        let url_ = this.baseUrl + "/api/Auths/SignIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignIn(_response);
        });
    }

    protected processSignIn(response: AxiosResponse): Promise<ZEngineResponse<ZFantasyToken>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ZFantasyToken.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZFantasyToken>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZFantasyToken>>(null as any);
    }

    /**
     * 登出
     * @param body (optional) 
     * @return Success
     */
    zSignOut(body: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Auths/ZSignOut";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processZSignOut(_response);
        });
    }

    protected processZSignOut(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class CategorySsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加文章栏目
     * @param body (optional) 
     * @return Success
     */
    addCategory(body: AddCategoryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CategorySs/AddCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddCategory(_response);
        });
    }

    protected processAddCategory(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除
     * @param body (optional) 
     * @return Success
     */
    delete(body: KeyDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CategorySs/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 文章栏目列表
     * @param name (optional) 
     * @return Success
     */
    getPage(name: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<CategoryPageOutput[]>> {
        let url_ = this.baseUrl + "/api/CategorySs/GetPage?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<CategoryPageOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CategoryPageOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<CategoryPageOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<CategoryPageOutput[]>>(null as any);
    }

    /**
     * 获取文章栏目下拉选项
     * @return Success
     */
    treeSelect( cancelToken?: CancelToken): Promise<ZEngineResponse<TreeSelectOutput[]>> {
        let url_ = this.baseUrl + "/api/CategorySs/TreeSelect";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTreeSelect(_response);
        });
    }

    protected processTreeSelect(response: AxiosResponse): Promise<ZEngineResponse<TreeSelectOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(TreeSelectOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TreeSelectOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TreeSelectOutput[]>>(null as any);
    }

    /**
     * 更新文章栏目
     * @param body (optional) 
     * @return Success
     */
    updateCategory(body: UpdateCategoryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CategorySs/UpdateCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateCategory(_response);
        });
    }

    protected processUpdateCategory(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class CommentsCsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 评论、回复
     * @param body (optional) 
     * @return Success
     */
    add(body: AddCommentInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CommentsCs/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 评论列表
     * @param body (optional) 
     * @return Success
     */
    getList(body: CommentPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<CommentOutputPageResult>> {
        let url_ = this.baseUrl + "/api/CommentsCs/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ZEngineResponse<CommentOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = CommentOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<CommentOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<CommentOutputPageResult>>(null as any);
    }

    /**
     * 点赞/取消点赞
     * @param body (optional) 对象ID
     * @return Success
     */
    praise(body: KeyDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<boolean>> {
        let url_ = this.baseUrl + "/api/CommentsCs/Praise";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPraise(_response);
        });
    }

    protected processPraise(response: AxiosResponse): Promise<ZEngineResponse<boolean>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<boolean>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<boolean>>(null as any);
    }

    /**
     * 回复分页
     * @param body (optional) 
     * @return Success
     */
    replyList(body: CommentPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ReplyOutputPageResult>> {
        let url_ = this.baseUrl + "/api/CommentsCs/ReplyList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReplyList(_response);
        });
    }

    protected processReplyList(response: AxiosResponse): Promise<ZEngineResponse<ReplyOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ReplyOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ReplyOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ReplyOutputPageResult>>(null as any);
    }
}

export class CustomConfigItemsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加自定义配置子项
     * @param body (optional) 
     * @return Success
     */
    addItem(body: AddCustomConfigItemInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigItems/AddItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddItem(_response);
        });
    }

    protected processAddItem(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除信息
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigItems/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 自定义配置项分页列表
     * @param body (optional) 
     * @return Success
     */
    getPage(body: CustomConfigItemQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<StringPageResult>> {
        let url_ = this.baseUrl + "/api/CustomConfigItems/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<StringPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = StringPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<StringPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<StringPageResult>>(null as any);
    }

    /**
     * 修改自定义配置子项
     * @param body (optional) 
     * @return Success
     */
    updateItem(body: UpdateCustomConfigItemInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigItems/UpdateItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateItem(_response);
        });
    }

    protected processUpdateItem(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class CustomConfigsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加自定义配置
     * @param body (optional) 
     * @return Success
     */
    addConfig(body: AddCustomConfigInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigs/AddConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddConfig(_response);
        });
    }

    protected processAddConfig(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除信息
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigs/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除自定义配置类
     * @param body (optional) 
     * @return Success
     */
    deleteClass(body: KeyDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigs/DeleteClass";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteClass(_response);
        });
    }

    protected processDeleteClass(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 生成自定配置类
     * @param body (optional) 
     * @return Success
     */
    generate(body: KeyDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigs/Generate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGenerate(_response);
        });
    }

    protected processGenerate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 获取自定义配置
     * @param code (optional) 自定义配置唯一编码
     * @return Success
     */
    getConfig(code: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigs/GetConfig?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetConfig(_response);
        });
    }

    protected processGetConfig(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 获取配置表单设计和表单数据
     * @param body (optional) 
     * @return Success
     */
    getFormJson(body: GetConfigDetailInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<CustomConfigDetailOutput>> {
        let url_ = this.baseUrl + "/api/CustomConfigs/GetFormJson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFormJson(_response);
        });
    }

    protected processGetFormJson(response: AxiosResponse): Promise<ZEngineResponse<CustomConfigDetailOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = CustomConfigDetailOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<CustomConfigDetailOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<CustomConfigDetailOutput>>(null as any);
    }

    /**
     * 自定义配置分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: CustomConfigQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<CustomConfigPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/CustomConfigs/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<CustomConfigPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = CustomConfigPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<CustomConfigPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<CustomConfigPageOutputPageResult>>(null as any);
    }

    /**
     * 修改配置表单设计
     * @param body (optional) 
     * @return Success
     */
    setJson(body: CustomConfigSetJsonInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigs/SetJson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetJson(_response);
        });
    }

    protected processSetJson(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 修改自定义配置
     * @param body (optional) 
     * @return Success
     */
    updateConfig(body: UpdateCustomConfigInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CustomConfigs/UpdateConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateConfig(_response);
        });
    }

    protected processUpdateConfig(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class FilesServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 获取文件
     * @param fileUrl (optional) 
     * @return Success
     */
    getFile(fileUrl: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Files/GetFile?";
        if (fileUrl === null)
            throw new Error("The parameter 'fileUrl' cannot be null.");
        else if (fileUrl !== undefined)
            url_ += "fileUrl=" + encodeURIComponent("" + fileUrl) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFile(_response);
        });
    }

    protected processGetFile(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 上传附件
     * @param file (optional) 
     * @return Success
     */
    uploadFile(file: FileParameter | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<UploadFileOutput[]>> {
        let url_ = this.baseUrl + "/api/Files/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUploadFile(_response);
        });
    }

    protected processUploadFile(response: AxiosResponse): Promise<ZEngineResponse<UploadFileOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(UploadFileOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<UploadFileOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<UploadFileOutput[]>>(null as any);
    }
}

export class FriendLinksServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加修改
     * @param body (optional) 
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateFriendInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/FriendLinks/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/FriendLinks/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 标签列表分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: FriendLinkPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<FriendLinkPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/FriendLinks/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<FriendLinkPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = FriendLinkPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<FriendLinkPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<FriendLinkPageOutputPageResult>>(null as any);
    }
}

export class MenusServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加菜单/按钮
     * @param body (optional) 
     * @return Success
     */
    addMenu(body: AddSysMenuInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Menus/AddMenu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddMenu(_response);
        });
    }

    protected processAddMenu(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除菜单/按钮
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Menus/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 根据菜单Id获取系统菜单详情
     * @param id (optional) 
     * @return Success
     */
    detail(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<MenuDetailOutput>> {
        let url_ = this.baseUrl + "/api/Menus/Detail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDetail(_response);
        });
    }

    protected processDetail(response: AxiosResponse): Promise<ZEngineResponse<MenuDetailOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = MenuDetailOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<MenuDetailOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<MenuDetailOutput>>(null as any);
    }

    /**
     * 菜单列表查询
     * @param name (optional) 
     * @return Success
     */
    getPage(name: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<MenuPageOutput[]>> {
        let url_ = this.baseUrl + "/api/Menus/GetPage?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<MenuPageOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(MenuPageOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<MenuPageOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<MenuPageOutput[]>>(null as any);
    }

    /**
     * 获取当前登录用户可用菜单
     * @return Success
     */
    permissionMenus( cancelToken?: CancelToken): Promise<ZEngineResponse<RouterOutput[]>> {
        let url_ = this.baseUrl + "/api/Menus/PermissionMenus";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPermissionMenus(_response);
        });
    }

    protected processPermissionMenus(response: AxiosResponse): Promise<ZEngineResponse<RouterOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(RouterOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<RouterOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<RouterOutput[]>>(null as any);
    }

    /**
     * 移除菜单中的按钮
     * @param menus (optional) 
     * @return Success
     */
    removeButton(menus: Menu[] | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Menus/RemoveButton?";
        if (menus === null)
            throw new Error("The parameter 'menus' cannot be null.");
        else if (menus !== undefined)
            menus && menus.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "menus[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemoveButton(_response);
        });
    }

    protected processRemoveButton(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 修改菜单/按钮状态
     * @param body (optional) 
     * @return Success
     */
    setStatus(body: AvailabilityDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Menus/SetStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetStatus(_response);
        });
    }

    protected processSetStatus(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 菜单按钮树
     * @return Success
     */
    treeMenuButton( cancelToken?: CancelToken): Promise<ZEngineResponse<TreeSelectOutput[]>> {
        let url_ = this.baseUrl + "/api/Menus/TreeMenuButton";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTreeMenuButton(_response);
        });
    }

    protected processTreeMenuButton(response: AxiosResponse): Promise<ZEngineResponse<TreeSelectOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(TreeSelectOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TreeSelectOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TreeSelectOutput[]>>(null as any);
    }

    /**
     * 菜单下拉树
     * @return Success
     */
    treeSelect( cancelToken?: CancelToken): Promise<ZEngineResponse<TreeSelectOutput[]>> {
        let url_ = this.baseUrl + "/api/Menus/TreeSelect";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTreeSelect(_response);
        });
    }

    protected processTreeSelect(response: AxiosResponse): Promise<ZEngineResponse<TreeSelectOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(TreeSelectOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TreeSelectOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TreeSelectOutput[]>>(null as any);
    }

    /**
     * 修改菜单/按钮
     * @param body (optional) 
     * @return Success
     */
    updateMenu(body: UpdateSysMenuInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Menus/UpdateMenu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateMenu(_response);
        });
    }

    protected processUpdateMenu(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class OAuthsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 申请友链
     * @param body (optional) 
     * @return Success
     */
    addLink(body: AddLinkOutput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/OAuths/AddLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddLink(_response);
        });
    }

    protected processAddLink(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 授权回调
     * @param type (optional) 授权类型
     * @param code (optional) 
     * @param state (optional) 缓存唯一ID
     * @return Success
     */
    callback(type: string | undefined, code: string | undefined, state: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/OAuths/Callback?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (state === null)
            throw new Error("The parameter 'state' cannot be null.");
        else if (state !== undefined)
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCallback(_response);
        });
    }

    protected processCallback(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 获取授权地址
     * @param type (optional) 
     * @return Success
     */
    getIpAddress(type: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<string>> {
        let url_ = this.baseUrl + "/api/OAuths/GetIpAddress?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetIpAddress(_response);
        });
    }

    protected processGetIpAddress(response: AxiosResponse): Promise<ZEngineResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string>>(null as any);
    }

    /**
     * 博客基本信息
     * @return Success
     */
    info( cancelToken?: CancelToken): Promise<ZEngineResponse<BlogOutput>> {
        let url_ = this.baseUrl + "/api/OAuths/Info";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInfo(_response);
        });
    }

    protected processInfo(response: AxiosResponse): Promise<ZEngineResponse<BlogOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = BlogOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<BlogOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<BlogOutput>>(null as any);
    }

    /**
     * 友情链接
     * @return Success
     */
    links( cancelToken?: CancelToken): Promise<ZEngineResponse<FriendLinkOutput[]>> {
        let url_ = this.baseUrl + "/api/OAuths/Links";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLinks(_response);
        });
    }

    protected processLinks(response: AxiosResponse): Promise<ZEngineResponse<FriendLinkOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(FriendLinkOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<FriendLinkOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<FriendLinkOutput[]>>(null as any);
    }

    /**
     * 登录
     * @param code (optional) 
     * @return Success
     */
    login(code: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ZFantasyToken>> {
        let url_ = this.baseUrl + "/api/OAuths/Login?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<ZEngineResponse<ZFantasyToken>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ZFantasyToken.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZFantasyToken>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZFantasyToken>>(null as any);
    }

    /**
     * 获取用户信息
     * @return Success
     */
    userInfo( cancelToken?: CancelToken): Promise<ZEngineResponse<OAuthAccountDetailOutput>> {
        let url_ = this.baseUrl + "/api/OAuths/UserInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserInfo(_response);
        });
    }

    protected processUserInfo(response: AxiosResponse): Promise<ZEngineResponse<OAuthAccountDetailOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = OAuthAccountDetailOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<OAuthAccountDetailOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<OAuthAccountDetailOutput>>(null as any);
    }
}

export class OrganizationSyssServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加组织机构
     * @param body (optional) 
     * @return Success
     */
    addOrg(body: AddOrgInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/OrganizationSyss/AddOrg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddOrg(_response);
        });
    }

    protected processAddOrg(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除菜单/按钮
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/OrganizationSyss/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 组织机构列表查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<SysOrgPageOutput[]>> {
        let url_ = this.baseUrl + "/api/OrganizationSyss/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<SysOrgPageOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SysOrgPageOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<SysOrgPageOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<SysOrgPageOutput[]>>(null as any);
    }

    /**
     * 获取机构下拉选项
     * @return Success
     */
    treeSelect( cancelToken?: CancelToken): Promise<ZEngineResponse<TreeSelectOutput[]>> {
        let url_ = this.baseUrl + "/api/OrganizationSyss/TreeSelect";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTreeSelect(_response);
        });
    }

    protected processTreeSelect(response: AxiosResponse): Promise<ZEngineResponse<TreeSelectOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(TreeSelectOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TreeSelectOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TreeSelectOutput[]>>(null as any);
    }

    /**
     * 更新组织机构
     * @param body (optional) 
     * @return Success
     */
    updateOrg(body: UpdateOrgInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/OrganizationSyss/UpdateOrg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateOrg(_response);
        });
    }

    protected processUpdateOrg(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class PictureSsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 上传图片到相册
     * @param body (optional) 
     * @return Success
     */
    addPictures(body: AddPictureInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/PictureSs/AddPictures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddPictures(_response);
        });
    }

    protected processAddPictures(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/PictureSs/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除上册图片
     * @param body (optional) 
     * @return Success
     */
    getPage(body: PicturesPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<PicturesPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/PictureSs/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<PicturesPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = PicturesPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<PicturesPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<PicturesPageOutputPageResult>>(null as any);
    }
}

export class RoleSyssServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加角色
     * @param body (optional) 
     * @return Success
     */
    addRole(body: AddRoleInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/RoleSyss/AddRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddRole(_response);
        });
    }

    protected processAddRole(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除角色
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/RoleSyss/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 角色分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: RoleQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<RolePageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/RoleSyss/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<RolePageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = RolePageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<RolePageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<RolePageOutputPageResult>>(null as any);
    }

    /**
     * 获取角色可访问的菜单和按钮id
     * @param id (optional) 角色id
     * @return Success
     */
    getRuleMenu(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<string[]>> {
        let url_ = this.baseUrl + "/api/RoleSyss/GetRuleMenu?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRuleMenu(_response);
        });
    }

    protected processGetRuleMenu(response: AxiosResponse): Promise<ZEngineResponse<string[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(item);
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string[]>>(null as any);
    }

    /**
     * 角色下拉选项
     * @return Success
     */
    roleSelect( cancelToken?: CancelToken): Promise<ZEngineResponse<SelectOutput[]>> {
        let url_ = this.baseUrl + "/api/RoleSyss/RoleSelect";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRoleSelect(_response);
        });
    }

    protected processRoleSelect(response: AxiosResponse): Promise<ZEngineResponse<SelectOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SelectOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<SelectOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<SelectOutput[]>>(null as any);
    }

    /**
     * 修改角色状态
     * @param body (optional) 
     * @return Success
     */
    setStatus(body: AvailabilityDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/RoleSyss/SetStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSetStatus(_response);
        });
    }

    protected processSetStatus(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 更新角色
     * @param body (optional) 
     * @return Success
     */
    updateRole(body: UpdateSysRoleInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/RoleSyss/UpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateRole(_response);
        });
    }

    protected processUpdateRole(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class TagssServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加修改
     * @param body (optional) 
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateTagInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Tagss/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Tagss/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 标签列表分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: TagsPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<TagsPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/Tagss/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<TagsPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = TagsPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TagsPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TagsPageOutputPageResult>>(null as any);
    }

    /**
     * 文章标签下拉选项
     * @return Success
     */
    select( cancelToken?: CancelToken): Promise<ZEngineResponse<SelectOutput[]>> {
        let url_ = this.baseUrl + "/api/Tagss/Select";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSelect(_response);
        });
    }

    protected processSelect(response: AxiosResponse): Promise<ZEngineResponse<SelectOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SelectOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<SelectOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<SelectOutput[]>>(null as any);
    }
}

export class TalksCsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 说说列表
     * @param body (optional) 
     * @return Success
     */
    getList(body: Pagination | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<TalksOutputPageResult>> {
        let url_ = this.baseUrl + "/api/TalksCs/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ZEngineResponse<TalksOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = TalksOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TalksOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TalksOutputPageResult>>(null as any);
    }

    /**
     * 说说详情
     * @param id (optional) 
     * @return Success
     */
    talkDetail(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<TalkDetailOutput>> {
        let url_ = this.baseUrl + "/api/TalksCs/TalkDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTalkDetail(_response);
        });
    }

    protected processTalkDetail(response: AxiosResponse): Promise<ZEngineResponse<TalkDetailOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = TalkDetailOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TalkDetailOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TalkDetailOutput>>(null as any);
    }
}

export class TalksSsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加修改说说
     * @param body (optional) 
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateTalksInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/TalksSs/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/TalksSs/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 说说分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: TalksPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<TalksPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/TalksSs/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<TalksPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = TalksPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TalksPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TalksPageOutputPageResult>>(null as any);
    }
}

export class TestServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 创建用户
     * @return Success
     */
    createUser( cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Test/CreateUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 获取jwttoken
     * @return Success
     */
    getUser( cancelToken?: CancelToken): Promise<ZEngineResponse<string>> {
        let url_ = this.baseUrl + "/api/Test/GetUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: AxiosResponse): Promise<ZEngineResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string>>(result200Data);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string>>(null as any);
    }

    /**
     * 获取jwttoken
     * @param body (optional) 
     * @return Success
     */
    login(body: ZUserInfoDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<string>> {
        let url_ = this.baseUrl + "/api/Test/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<ZEngineResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string>>(null as any);
    }

    /**
     * @return Success
     */
    logout( cancelToken?: CancelToken): Promise<ZEngineResponse<string>> {
        let url_ = this.baseUrl + "/api/Test/Logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: AxiosResponse): Promise<ZEngineResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string>>(null as any);
    }

    /**
     * 获取用户
     * @return Success
     */
    seacthUser( cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        let url_ = this.baseUrl + "/api/Test/SeacthUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeacthUser(_response);
        });
    }

    protected processSeacthUser(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ZUserInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(result200Data);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(null as any);
    }

    /**
     * 获取用户
     * @return Success
     */
    seacthUserCache( cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        let url_ = this.baseUrl + "/api/Test/SeacthUserCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeacthUserCache(_response);
        });
    }

    protected processSeacthUserCache(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ZUserInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(result200Data);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(null as any);
    }
}

export class UsersServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 创建
     * @return Success
     */
    create( cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfo>> {
        let url_ = this.baseUrl + "/api/Users/Create";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfo>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ZUserInfo.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfo>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfo>>(null as any);
    }

    /**
     * @return Success
     */
    currentUserInfo( cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfoOutput>> {
        let url_ = this.baseUrl + "/api/Users/CurrentUserInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCurrentUserInfo(_response);
        });
    }

    protected processCurrentUserInfo(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfoOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ZUserInfoOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfoOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfoOutput>>(null as any);
    }

    /**
     * 查询一个用户
     * @return Success
     */
    getFrist( cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        let url_ = this.baseUrl + "/api/Users/GetFrist";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFrist(_response);
        });
    }

    protected processGetFrist(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ZUserInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(null as any);
    }

    /**
     * 登录
     * @param body (optional) 
     * @return Success
     */
    login(body: ZUserInfoDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfoDto>> {
        let url_ = this.baseUrl + "/api/Users/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfoDto>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ZUserInfoDto.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfoDto>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfoDto>>(null as any);
    }
}

export class UserSyssServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加系统用户
     * @param body (optional) 
     * @return Success
     */
    addUser(body: AddUserInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/UserSyss/AddUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddUser(_response);
        });
    }

    protected processAddUser(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 用户修改账户密码
     * @param body (optional) 
     * @return Success
     */
    changePassword(body: ChangePasswordOutput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/UserSyss/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 获取当前登录用户的信息
     * @return Success
     */
    currentUserInfo( cancelToken?: CancelToken): Promise<ZEngineResponse<UserInfoOutput>> {
        let url_ = this.baseUrl + "/api/UserSyss/CurrentUserInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCurrentUserInfo(_response);
        });
    }

    protected processCurrentUserInfo(response: AxiosResponse): Promise<ZEngineResponse<UserInfoOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = UserInfoOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<UserInfoOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<UserInfoOutput>>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/UserSyss/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 系统用户详情
     * @param id (optional) 
     * @return Success
     */
    detail(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<UpdateUserInput>> {
        let url_ = this.baseUrl + "/api/UserSyss/Detail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDetail(_response);
        });
    }

    protected processDetail(response: AxiosResponse): Promise<ZEngineResponse<UpdateUserInput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = UpdateUserInput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<UpdateUserInput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<UpdateUserInput>>(null as any);
    }

    /**
     * 系统用户分页查询
     * @param body (optional) 
     * @return Success
     */
    pageData(body: QueryUserInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<UserPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/UserSyss/PageData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPageData(_response);
        });
    }

    protected processPageData(response: AxiosResponse): Promise<ZEngineResponse<UserPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = UserPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<UserPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<UserPageOutputPageResult>>(null as any);
    }

    /**
     * 重置系统用户密码
     * @param body (optional) 
     * @return Success
     */
    reset(body: ResetPasswordInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/UserSyss/Reset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReset(_response);
        });
    }

    protected processReset(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 更新系统用户信息
     * @param body (optional) 
     * @return Success
     */
    updateUser(body: UpdateUserInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/UserSyss/UpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUser(_response);
        });
    }

    protected processUpdateUser(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 用户修改头像
     * @param body (optional) 
     * @return Success
     */
    uploadAvatar(body: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/UserSyss/UploadAvatar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUploadAvatar(_response);
        });
    }

    protected processUploadAvatar(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class ServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 系统用户修改自己的信息
     * @param body (optional) 
     * @return Success
     */
    updateCurrentUser(body: UpdateCurrentUserInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/updateCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateCurrentUser(_response);
        });
    }

    protected processUpdateCurrentUser(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(_responseText);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 查询
     * @return Success
     */
    weatherForecast( cancelToken?: CancelToken): Promise<ZEngineResponse<string>> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processWeatherForecast(_response);
        });
    }

    protected processWeatherForecast(response: AxiosResponse): Promise<ZEngineResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string>>(null as any);
    }
}

export class AddCategoryInput implements IAddCategoryInput {
    /** 栏目名称 */
    name: string | undefined;
    /** 父级id */
    parentId: number | undefined;
    /** 封面图 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: IAddCategoryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.cover = _data["cover"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): AddCategoryInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddCategoryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["cover"] = this.cover;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        return data;
    }

    clone(): AddCategoryInput {
        const json = this.toJSON();
        let result = new AddCategoryInput();
        result.init(json);
        return result;
    }
}

export interface IAddCategoryInput {
    /** 栏目名称 */
    name: string | undefined;
    /** 父级id */
    parentId: number | undefined;
    /** 封面图 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
}

export class AddCommentInput implements IAddCommentInput {
    /** 对应模块ID（null表留言，0代表友链的评论） */
    moduleId: string | undefined;
    /** 顶级楼层评论ID */
    rootId: string | undefined;
    /** 被回复的评论ID */
    parentId: string | undefined;
    /** 回复人ID */
    replyAccountId: string | undefined;
    /** 评论内容 */
    content: string;

    constructor(data?: IAddCommentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.moduleId = _data["moduleId"];
            this.rootId = _data["rootId"];
            this.parentId = _data["parentId"];
            this.replyAccountId = _data["replyAccountId"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): AddCommentInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddCommentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["moduleId"] = this.moduleId;
        data["rootId"] = this.rootId;
        data["parentId"] = this.parentId;
        data["replyAccountId"] = this.replyAccountId;
        data["content"] = this.content;
        return data;
    }

    clone(): AddCommentInput {
        const json = this.toJSON();
        let result = new AddCommentInput();
        result.init(json);
        return result;
    }
}

export interface IAddCommentInput {
    /** 对应模块ID（null表留言，0代表友链的评论） */
    moduleId: string | undefined;
    /** 顶级楼层评论ID */
    rootId: string | undefined;
    /** 被回复的评论ID */
    parentId: string | undefined;
    /** 回复人ID */
    replyAccountId: string | undefined;
    /** 评论内容 */
    content: string;
}

export class AddCustomConfigInput implements IAddCustomConfigInput {
    /** 配置名称 */
    name: string;
    /** 配置唯一编码（类名） */
    code: string;
    /** 是否是多项（集合） */
    isMultiple: boolean;
    /** 是否允许创建实体 */
    allowCreationEntity: boolean;
    status: AvailabilityStatus;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: IAddCustomConfigInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.isMultiple = _data["isMultiple"];
            this.allowCreationEntity = _data["allowCreationEntity"];
            this.status = _data["status"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): AddCustomConfigInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddCustomConfigInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["isMultiple"] = this.isMultiple;
        data["allowCreationEntity"] = this.allowCreationEntity;
        data["status"] = this.status;
        data["remark"] = this.remark;
        return data;
    }

    clone(): AddCustomConfigInput {
        const json = this.toJSON();
        let result = new AddCustomConfigInput();
        result.init(json);
        return result;
    }
}

export interface IAddCustomConfigInput {
    /** 配置名称 */
    name: string;
    /** 配置唯一编码（类名） */
    code: string;
    /** 是否是多项（集合） */
    isMultiple: boolean;
    /** 是否允许创建实体 */
    allowCreationEntity: boolean;
    status: AvailabilityStatus;
    /** 备注 */
    remark: string | undefined;
}

export class AddCustomConfigItemInput implements IAddCustomConfigItemInput {
    /** 自定义配置Id */
    configId: string;
    /** 配置 */
    json: string;

    constructor(data?: IAddCustomConfigItemInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.configId = _data["configId"];
            this.json = _data["json"];
        }
    }

    static fromJS(data: any): AddCustomConfigItemInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddCustomConfigItemInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["configId"] = this.configId;
        data["json"] = this.json;
        return data;
    }

    clone(): AddCustomConfigItemInput {
        const json = this.toJSON();
        let result = new AddCustomConfigItemInput();
        result.init(json);
        return result;
    }
}

export interface IAddCustomConfigItemInput {
    /** 自定义配置Id */
    configId: string;
    /** 配置 */
    json: string;
}

export class AddLinkOutput implements IAddLinkOutput {
    /** 网站名称 */
    siteName: string;
    /** 网站链接 */
    link: string;
    /** 网站logo */
    logo: string;
    /** 对方博客友链的地址 */
    url: string;
    /** 网站介绍 */
    remark: string;

    constructor(data?: IAddLinkOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.siteName = _data["siteName"];
            this.link = _data["link"];
            this.logo = _data["logo"];
            this.url = _data["url"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): AddLinkOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AddLinkOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteName"] = this.siteName;
        data["link"] = this.link;
        data["logo"] = this.logo;
        data["url"] = this.url;
        data["remark"] = this.remark;
        return data;
    }

    clone(): AddLinkOutput {
        const json = this.toJSON();
        let result = new AddLinkOutput();
        result.init(json);
        return result;
    }
}

export interface IAddLinkOutput {
    /** 网站名称 */
    siteName: string;
    /** 网站链接 */
    link: string;
    /** 网站logo */
    logo: string;
    /** 对方博客友链的地址 */
    url: string;
    /** 网站介绍 */
    remark: string;
}

export class AddOrgInput implements IAddOrgInput {
    /** 父级Id */
    parentId: string | undefined;
    /** 部门名称 */
    name: string;
    /** 部门编码 */
    code: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: IAddOrgInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentId = _data["parentId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): AddOrgInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrgInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        return data;
    }

    clone(): AddOrgInput {
        const json = this.toJSON();
        let result = new AddOrgInput();
        result.init(json);
        return result;
    }
}

export interface IAddOrgInput {
    /** 父级Id */
    parentId: string | undefined;
    /** 部门名称 */
    name: string;
    /** 部门编码 */
    code: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
}

export class AddPictureInput implements IAddPictureInput {
    /** 相册Id */
    albumId: string;
    /** 图片地址 */
    url: string;

    constructor(data?: IAddPictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.albumId = _data["albumId"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): AddPictureInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddPictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["albumId"] = this.albumId;
        data["url"] = this.url;
        return data;
    }

    clone(): AddPictureInput {
        const json = this.toJSON();
        let result = new AddPictureInput();
        result.init(json);
        return result;
    }
}

export interface IAddPictureInput {
    /** 相册Id */
    albumId: string;
    /** 图片地址 */
    url: string;
}

export class AddRoleInput implements IAddRoleInput {
    /** 角色名称 */
    name: string;
    status: AvailabilityStatus;
    /** 角色编码 */
    code: string;
    /** 排序值 */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 授权按钮菜单Id */
    menus: string[];

    constructor(data?: IAddRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.menus = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.status = _data["status"];
            this.code = _data["code"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["menus"])) {
                this.menus = [] as any;
                for (let item of _data["menus"])
                    this.menus.push(item);
            }
        }
    }

    static fromJS(data: any): AddRoleInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["status"] = this.status;
        data["code"] = this.code;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        if (Array.isArray(this.menus)) {
            data["menus"] = [];
            for (let item of this.menus)
                data["menus"].push(item);
        }
        return data;
    }

    clone(): AddRoleInput {
        const json = this.toJSON();
        let result = new AddRoleInput();
        result.init(json);
        return result;
    }
}

export interface IAddRoleInput {
    /** 角色名称 */
    name: string;
    status: AvailabilityStatus;
    /** 角色编码 */
    code: string;
    /** 排序值 */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 授权按钮菜单Id */
    menus: string[];
}

export class AddSysMenuInput implements IAddSysMenuInput {
    /** 菜单名称 */
    name: string;
    type: MenuType;
    /** 权限编码 */
    code: string | undefined;
    /** 父级菜单 */
    parentId: string | undefined;
    /** 路由名 */
    routeName: string | undefined;
    /** 路由地址 */
    path: string | undefined;
    /** 组件路径 */
    component: string | undefined;
    /** 重定向地址 */
    redirect: string | undefined;
    /** 菜单图标 */
    icon: string | undefined;
    /** 是否内嵌页面 */
    isIframe: boolean;
    /** 外链地址 */
    link: string | undefined;
    /** 是否可见 */
    isVisible: boolean;
    /** 是否缓存 */
    isKeepAlive: boolean;
    /** 是否固定 */
    isFixed: boolean;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: IAddSysMenuInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.routeName = _data["routeName"];
            this.path = _data["path"];
            this.component = _data["component"];
            this.redirect = _data["redirect"];
            this.icon = _data["icon"];
            this.isIframe = _data["isIframe"];
            this.link = _data["link"];
            this.isVisible = _data["isVisible"];
            this.isKeepAlive = _data["isKeepAlive"];
            this.isFixed = _data["isFixed"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): AddSysMenuInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddSysMenuInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["routeName"] = this.routeName;
        data["path"] = this.path;
        data["component"] = this.component;
        data["redirect"] = this.redirect;
        data["icon"] = this.icon;
        data["isIframe"] = this.isIframe;
        data["link"] = this.link;
        data["isVisible"] = this.isVisible;
        data["isKeepAlive"] = this.isKeepAlive;
        data["isFixed"] = this.isFixed;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        return data;
    }

    clone(): AddSysMenuInput {
        const json = this.toJSON();
        let result = new AddSysMenuInput();
        result.init(json);
        return result;
    }
}

export interface IAddSysMenuInput {
    /** 菜单名称 */
    name: string;
    type: MenuType;
    /** 权限编码 */
    code: string | undefined;
    /** 父级菜单 */
    parentId: string | undefined;
    /** 路由名 */
    routeName: string | undefined;
    /** 路由地址 */
    path: string | undefined;
    /** 组件路径 */
    component: string | undefined;
    /** 重定向地址 */
    redirect: string | undefined;
    /** 菜单图标 */
    icon: string | undefined;
    /** 是否内嵌页面 */
    isIframe: boolean;
    /** 外链地址 */
    link: string | undefined;
    /** 是否可见 */
    isVisible: boolean;
    /** 是否缓存 */
    isKeepAlive: boolean;
    /** 是否固定 */
    isFixed: boolean;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
}

export class AddUserInput implements IAddUserInput {
    /** 用户名 */
    userName: string;
    /** 姓名 */
    name: string;
    gender: Gender;
    /** 组织机构id */
    orgId: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    status: AvailabilityStatus;
    /** 邮箱 */
    email: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 角色 */
    roles: string[] | undefined;

    constructor(data?: IAddUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.orgId = _data["orgId"];
            this.nickName = _data["nickName"];
            this.birthday = _data["birthday"] ? moment(_data["birthday"].toString()) : <any>undefined;
            this.mobile = _data["mobile"];
            this.status = _data["status"];
            this.email = _data["email"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles.push(item);
            }
        }
    }

    static fromJS(data: any): AddUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["orgId"] = this.orgId;
        data["nickName"] = this.nickName;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["mobile"] = this.mobile;
        data["status"] = this.status;
        data["email"] = this.email;
        data["remark"] = this.remark;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }

    clone(): AddUserInput {
        const json = this.toJSON();
        let result = new AddUserInput();
        result.init(json);
        return result;
    }
}

export interface IAddUserInput {
    /** 用户名 */
    userName: string;
    /** 姓名 */
    name: string;
    gender: Gender;
    /** 组织机构id */
    orgId: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    status: AvailabilityStatus;
    /** 邮箱 */
    email: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 角色 */
    roles: string[] | undefined;
}

export class AlbumsOutput implements IAlbumsOutput {
    /** 相册ID */
    id: string;
    /** 相册名称 */
    name: string | undefined;
    /** 相册封面 */
    cover: string | undefined;
    /** 相册描述 */
    remark: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: IAlbumsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.remark = _data["remark"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AlbumsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["remark"] = this.remark;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): AlbumsOutput {
        const json = this.toJSON();
        let result = new AlbumsOutput();
        result.init(json);
        return result;
    }
}

export interface IAlbumsOutput {
    /** 相册ID */
    id: string;
    /** 相册名称 */
    name: string | undefined;
    /** 相册封面 */
    cover: string | undefined;
    /** 相册描述 */
    remark: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
}

export class AlbumsOutputPageResult implements IAlbumsOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AlbumsOutput[] | undefined;

    constructor(data?: IAlbumsOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(AlbumsOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AlbumsOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): AlbumsOutputPageResult {
        const json = this.toJSON();
        let result = new AlbumsOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IAlbumsOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AlbumsOutput[] | undefined;
}

export class AlbumsPageOutput implements IAlbumsPageOutput {
    /** 相册ID */
    id: string;
    /** 名称 */
    name: string | undefined;
    type: CoverType;
    status: AvailabilityStatus;
    /** 是否显示 */
    isVisible: boolean;
    /** 排序 */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 封面 */
    cover: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: IAlbumsPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.isVisible = _data["isVisible"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            this.cover = _data["cover"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AlbumsPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        data["status"] = this.status;
        data["isVisible"] = this.isVisible;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        data["cover"] = this.cover;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): AlbumsPageOutput {
        const json = this.toJSON();
        let result = new AlbumsPageOutput();
        result.init(json);
        return result;
    }
}

export interface IAlbumsPageOutput {
    /** 相册ID */
    id: string;
    /** 名称 */
    name: string | undefined;
    type: CoverType;
    status: AvailabilityStatus;
    /** 是否显示 */
    isVisible: boolean;
    /** 排序 */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 封面 */
    cover: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
}

export class AlbumsPageOutputPageResult implements IAlbumsPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AlbumsPageOutput[] | undefined;

    constructor(data?: IAlbumsPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(AlbumsPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AlbumsPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): AlbumsPageOutputPageResult {
        const json = this.toJSON();
        let result = new AlbumsPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IAlbumsPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AlbumsPageOutput[] | undefined;
}

export class AlbumsPageQueryInput implements IAlbumsPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 相册名称 */
    name: string | undefined;
    type: CoverType;

    constructor(data?: IAlbumsPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): AlbumsPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }

    clone(): AlbumsPageQueryInput {
        const json = this.toJSON();
        let result = new AlbumsPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface IAlbumsPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 相册名称 */
    name: string | undefined;
    type: CoverType;
}

export class ArticleBasicsOutput implements IArticleBasicsOutput {
    /** 文章ID */
    id: string;
    /** 封面图 */
    cover: string | undefined;
    /** 类型 */
    type: number;
    /** 标题 */
    title: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment | undefined;

    constructor(data?: IArticleBasicsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.title = _data["title"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ArticleBasicsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleBasicsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["title"] = this.title;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): ArticleBasicsOutput {
        const json = this.toJSON();
        let result = new ArticleBasicsOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleBasicsOutput {
    /** 文章ID */
    id: string;
    /** 封面图 */
    cover: string | undefined;
    /** 类型 */
    type: number;
    /** 标题 */
    title: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment | undefined;
}

export class ArticleDetailOutput implements IArticleDetailOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 简介 */
    summary: string | undefined;
    /** 封面 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 原文地址 */
    link: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 排序 */
    sort: number;
    /** 作者 */
    author: string | undefined;
    /** 文章内容 */
    content: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是个是HTML */
    isHtml: boolean;
    creationType: CreationType;
    /** 过期时间（过期后文章不显示） */
    expiredTime: moment.Moment | undefined;
    /** 标签 */
    tags: string[] | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;

    constructor(data?: IArticleDetailOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.summary = _data["summary"];
            this.cover = _data["cover"];
            this.status = _data["status"];
            this.link = _data["link"];
            this.isTop = _data["isTop"];
            this.sort = _data["sort"];
            this.author = _data["author"];
            this.content = _data["content"];
            this.isAllowComments = _data["isAllowComments"];
            this.isHtml = _data["isHtml"];
            this.creationType = _data["creationType"];
            this.expiredTime = _data["expiredTime"] ? moment(_data["expiredTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags.push(item);
            }
            this.categoryId = _data["categoryId"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ArticleDetailOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleDetailOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["summary"] = this.summary;
        data["cover"] = this.cover;
        data["status"] = this.status;
        data["link"] = this.link;
        data["isTop"] = this.isTop;
        data["sort"] = this.sort;
        data["author"] = this.author;
        data["content"] = this.content;
        data["isAllowComments"] = this.isAllowComments;
        data["isHtml"] = this.isHtml;
        data["creationType"] = this.creationType;
        data["expiredTime"] = this.expiredTime ? this.expiredTime.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["categoryId"] = this.categoryId;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): ArticleDetailOutput {
        const json = this.toJSON();
        let result = new ArticleDetailOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleDetailOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 简介 */
    summary: string | undefined;
    /** 封面 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 原文地址 */
    link: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 排序 */
    sort: number;
    /** 作者 */
    author: string | undefined;
    /** 文章内容 */
    content: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是个是HTML */
    isHtml: boolean;
    creationType: CreationType;
    /** 过期时间（过期后文章不显示） */
    expiredTime: moment.Moment | undefined;
    /** 标签 */
    tags: string[] | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
}

export class ArticleInfoOutput implements IArticleInfoOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 文章内容 */
    content: string | undefined;
    /** 简介 */
    summary: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 作者 */
    author: string | undefined;
    /** 浏览量 */
    views: number;
    creationType: CreationType;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是否是html */
    isHtml: boolean;
    /** 是否置顶 */
    isTop: boolean;
    /** 转载链接 */
    link: string | undefined;
    /** 点赞数量 */
    praiseTotal: number;
    /** 当前用户是否已点赞 */
    isPraise: boolean;
    /** 栏目Id */
    categoryId: string;
    /** 栏目名称 */
    categoryName: string | undefined;
    /** 最后更新时间 */
    updatedTime: moment.Moment | undefined;
    prev: ArticleBasicsOutput;
    next: ArticleBasicsOutput;
    /** 随机 */
    random: ArticleBasicsOutput[] | undefined;
    /** 标签 */
    tags: TagsOutput[] | undefined;

    constructor(data?: IArticleInfoOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.summary = _data["summary"];
            this.cover = _data["cover"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
            this.author = _data["author"];
            this.views = _data["views"];
            this.creationType = _data["creationType"];
            this.isAllowComments = _data["isAllowComments"];
            this.isHtml = _data["isHtml"];
            this.isTop = _data["isTop"];
            this.link = _data["link"];
            this.praiseTotal = _data["praiseTotal"];
            this.isPraise = _data["isPraise"];
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.updatedTime = _data["updatedTime"] ? moment(_data["updatedTime"].toString()) : <any>undefined;
            this.prev = _data["prev"] ? ArticleBasicsOutput.fromJS(_data["prev"]) : <any>undefined;
            this.next = _data["next"] ? ArticleBasicsOutput.fromJS(_data["next"]) : <any>undefined;
            if (Array.isArray(_data["random"])) {
                this.random = [] as any;
                for (let item of _data["random"])
                    this.random.push(ArticleBasicsOutput.fromJS(item));
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags.push(TagsOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ArticleInfoOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleInfoOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["summary"] = this.summary;
        data["cover"] = this.cover;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        data["author"] = this.author;
        data["views"] = this.views;
        data["creationType"] = this.creationType;
        data["isAllowComments"] = this.isAllowComments;
        data["isHtml"] = this.isHtml;
        data["isTop"] = this.isTop;
        data["link"] = this.link;
        data["praiseTotal"] = this.praiseTotal;
        data["isPraise"] = this.isPraise;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["updatedTime"] = this.updatedTime ? this.updatedTime.toISOString() : <any>undefined;
        data["prev"] = this.prev ? this.prev.toJSON() : <any>undefined;
        data["next"] = this.next ? this.next.toJSON() : <any>undefined;
        if (Array.isArray(this.random)) {
            data["random"] = [];
            for (let item of this.random)
                data["random"].push(item.toJSON());
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        return data;
    }

    clone(): ArticleInfoOutput {
        const json = this.toJSON();
        let result = new ArticleInfoOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleInfoOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 文章内容 */
    content: string | undefined;
    /** 简介 */
    summary: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 作者 */
    author: string | undefined;
    /** 浏览量 */
    views: number;
    creationType: CreationType;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是否是html */
    isHtml: boolean;
    /** 是否置顶 */
    isTop: boolean;
    /** 转载链接 */
    link: string | undefined;
    /** 点赞数量 */
    praiseTotal: number;
    /** 当前用户是否已点赞 */
    isPraise: boolean;
    /** 栏目Id */
    categoryId: string;
    /** 栏目名称 */
    categoryName: string | undefined;
    /** 最后更新时间 */
    updatedTime: moment.Moment | undefined;
    prev: ArticleBasicsOutput;
    next: ArticleBasicsOutput;
    /** 随机 */
    random: ArticleBasicsOutput[] | undefined;
    /** 标签 */
    tags: TagsOutput[] | undefined;
}

export class ArticleListQueryInput implements IArticleListQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标签ID */
    tagId: string | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
    /** 关键词 */
    keyword: string | undefined;

    constructor(data?: IArticleListQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.tagId = _data["tagId"];
            this.categoryId = _data["categoryId"];
            this.keyword = _data["keyword"];
        }
    }

    static fromJS(data: any): ArticleListQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleListQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["tagId"] = this.tagId;
        data["categoryId"] = this.categoryId;
        data["keyword"] = this.keyword;
        return data;
    }

    clone(): ArticleListQueryInput {
        const json = this.toJSON();
        let result = new ArticleListQueryInput();
        result.init(json);
        return result;
    }
}

export interface IArticleListQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标签ID */
    tagId: string | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
    /** 关键词 */
    keyword: string | undefined;
}

export class ArticleOutput implements IArticleOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 栏目ID */
    categoryId: string;
    /** 栏目名称 */
    categoryName: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    creationType: CreationType;
    /** 简介 */
    summary: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 标签 */
    tags: TagsOutput[] | undefined;

    constructor(data?: IArticleOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.isTop = _data["isTop"];
            this.creationType = _data["creationType"];
            this.summary = _data["summary"];
            this.cover = _data["cover"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags.push(TagsOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ArticleOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["isTop"] = this.isTop;
        data["creationType"] = this.creationType;
        data["summary"] = this.summary;
        data["cover"] = this.cover;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        return data;
    }

    clone(): ArticleOutput {
        const json = this.toJSON();
        let result = new ArticleOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 栏目ID */
    categoryId: string;
    /** 栏目名称 */
    categoryName: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    creationType: CreationType;
    /** 简介 */
    summary: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 标签 */
    tags: TagsOutput[] | undefined;
}

export class ArticleOutputPageResult implements IArticleOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ArticleOutput[] | undefined;

    constructor(data?: IArticleOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(ArticleOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ArticleOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): ArticleOutputPageResult {
        const json = this.toJSON();
        let result = new ArticleOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IArticleOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ArticleOutput[] | undefined;
}

export class ArticlePageOutput implements IArticlePageOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    status: AvailabilityStatus;
    /** 排序 */
    sort: number;
    /** 封面 */
    cover: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 创建时间 */
    createdTime: moment.Moment;
    creationType: CreationType;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 浏览次数 */
    views: number;
    /** 栏目名称 */
    categoryName: string | undefined;

    constructor(data?: IArticlePageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.cover = _data["cover"];
            this.isTop = _data["isTop"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            this.creationType = _data["creationType"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
            this.views = _data["views"];
            this.categoryName = _data["categoryName"];
        }
    }

    static fromJS(data: any): ArticlePageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticlePageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["cover"] = this.cover;
        data["isTop"] = this.isTop;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["creationType"] = this.creationType;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        data["views"] = this.views;
        data["categoryName"] = this.categoryName;
        return data;
    }

    clone(): ArticlePageOutput {
        const json = this.toJSON();
        let result = new ArticlePageOutput();
        result.init(json);
        return result;
    }
}

export interface IArticlePageOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    status: AvailabilityStatus;
    /** 排序 */
    sort: number;
    /** 封面 */
    cover: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 创建时间 */
    createdTime: moment.Moment;
    creationType: CreationType;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 浏览次数 */
    views: number;
    /** 栏目名称 */
    categoryName: string | undefined;
}

export class ArticlePageOutputPageResult implements IArticlePageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ArticlePageOutput[] | undefined;

    constructor(data?: IArticlePageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(ArticlePageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ArticlePageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new ArticlePageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): ArticlePageOutputPageResult {
        const json = this.toJSON();
        let result = new ArticlePageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IArticlePageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ArticlePageOutput[] | undefined;
}

export class ArticlePageQueryInput implements IArticlePageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标题 */
    title: string | undefined;
    /** 栏目ID */
    categoryId: string | undefined;

    constructor(data?: IArticlePageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.title = _data["title"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): ArticlePageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticlePageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["title"] = this.title;
        data["categoryId"] = this.categoryId;
        return data;
    }

    clone(): ArticlePageQueryInput {
        const json = this.toJSON();
        let result = new ArticlePageQueryInput();
        result.init(json);
        return result;
    }
}

export interface IArticlePageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标题 */
    title: string | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
}

export class ArticleReportOutput implements IArticleReportOutput {
    /** 文章数量 */
    articleCount: number;
    /** 标签数量 */
    tagCount: number;
    /** 栏目数量 */
    categoryCount: number;
    /** 用户量 */
    userCount: number;
    /** 友链数量 */
    linkCount: number;

    constructor(data?: IArticleReportOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.articleCount = _data["articleCount"];
            this.tagCount = _data["tagCount"];
            this.categoryCount = _data["categoryCount"];
            this.userCount = _data["userCount"];
            this.linkCount = _data["linkCount"];
        }
    }

    static fromJS(data: any): ArticleReportOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleReportOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleCount"] = this.articleCount;
        data["tagCount"] = this.tagCount;
        data["categoryCount"] = this.categoryCount;
        data["userCount"] = this.userCount;
        data["linkCount"] = this.linkCount;
        return data;
    }

    clone(): ArticleReportOutput {
        const json = this.toJSON();
        let result = new ArticleReportOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleReportOutput {
    /** 文章数量 */
    articleCount: number;
    /** 标签数量 */
    tagCount: number;
    /** 栏目数量 */
    categoryCount: number;
    /** 用户量 */
    userCount: number;
    /** 友链数量 */
    linkCount: number;
}

export class AuthAccountPageOutput implements IAuthAccountPageOutput {
    /** 主键 */
    id: string | undefined;
    /** 昵称 */
    name: string | undefined;
    gender: Gender;
    /** 授权类型 */
    type: string | undefined;
    /** 是否是博主 */
    isBlogger: boolean;
    /** 头像 */
    avatar: string | undefined;
    /** 注册时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: IAuthAccountPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.type = _data["type"];
            this.isBlogger = _data["isBlogger"];
            this.avatar = _data["avatar"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthAccountPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AuthAccountPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["type"] = this.type;
        data["isBlogger"] = this.isBlogger;
        data["avatar"] = this.avatar;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): AuthAccountPageOutput {
        const json = this.toJSON();
        let result = new AuthAccountPageOutput();
        result.init(json);
        return result;
    }
}

export interface IAuthAccountPageOutput {
    /** 主键 */
    id: string | undefined;
    /** 昵称 */
    name: string | undefined;
    gender: Gender;
    /** 授权类型 */
    type: string | undefined;
    /** 是否是博主 */
    isBlogger: boolean;
    /** 头像 */
    avatar: string | undefined;
    /** 注册时间 */
    createdTime: moment.Moment | undefined;
}

export class AuthAccountPageOutputPageResult implements IAuthAccountPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AuthAccountPageOutput[] | undefined;

    constructor(data?: IAuthAccountPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(AuthAccountPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AuthAccountPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new AuthAccountPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): AuthAccountPageOutputPageResult {
        const json = this.toJSON();
        let result = new AuthAccountPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IAuthAccountPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AuthAccountPageOutput[] | undefined;
}

export class AuthAccountPageQueryInput implements IAuthAccountPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 昵称 */
    name: string | undefined;

    constructor(data?: IAuthAccountPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AuthAccountPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new AuthAccountPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["name"] = this.name;
        return data;
    }

    clone(): AuthAccountPageQueryInput {
        const json = this.toJSON();
        let result = new AuthAccountPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface IAuthAccountPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 昵称 */
    name: string | undefined;
}

export class AvailabilityDto implements IAvailabilityDto {
    id: string | undefined;
    gId: string | undefined;
    status: AvailabilityStatus;

    constructor(data?: IAvailabilityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gId = _data["gId"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): AvailabilityDto {
        data = typeof data === 'object' ? data : {};
        let result = new AvailabilityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gId"] = this.gId;
        data["status"] = this.status;
        return data;
    }

    clone(): AvailabilityDto {
        const json = this.toJSON();
        let result = new AvailabilityDto();
        result.init(json);
        return result;
    }
}

export interface IAvailabilityDto {
    id: string | undefined;
    gId: string | undefined;
    status: AvailabilityStatus;
}

export enum AvailabilityStatus {
    _0 = 0,
    _1 = 1,
}

export class BlogOutput implements IBlogOutput {
    site: BlogSetting;
    info: BloggerInfo;
    /** 各个页面封面图 */
    covers: { [key: string]: string[]; } | undefined;

    constructor(data?: IBlogOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.site = _data["site"] ? BlogSetting.fromJS(_data["site"]) : <any>undefined;
            this.info = _data["info"] ? BloggerInfo.fromJS(_data["info"]) : <any>undefined;
            if (_data["covers"]) {
                this.covers = {} as any;
                for (let key in _data["covers"]) {
                    if (_data["covers"].hasOwnProperty(key))
                        (<any>this.covers)[key] = _data["covers"][key] !== undefined ? _data["covers"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): BlogOutput {
        data = typeof data === 'object' ? data : {};
        let result = new BlogOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["site"] = this.site ? this.site.toJSON() : <any>undefined;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        if (this.covers) {
            data["covers"] = {};
            for (let key in this.covers) {
                if (this.covers.hasOwnProperty(key))
                    (<any>data["covers"])[key] = (<any>this.covers)[key];
            }
        }
        return data;
    }

    clone(): BlogOutput {
        const json = this.toJSON();
        let result = new BlogOutput();
        result.init(json);
        return result;
    }
}

export interface IBlogOutput {
    site: BlogSetting;
    info: BloggerInfo;
    /** 各个页面封面图 */
    covers: { [key: string]: string[]; } | undefined;
}

export class BlogSetting implements IBlogSetting {
    logo: ImgInfo[] | undefined;
    logoUrl: string | undefined;
    favicon: ImgInfo[] | undefined;
    faviconUrl: string | undefined;
    isRewards: boolean | undefined;
    aliPay: ImgInfo[] | undefined;
    aliPayUrl: string | undefined;
    wxPay: ImgInfo[] | undefined;
    wxPayUrl: string | undefined;
    isAllowMessage: boolean | undefined;
    isAllowComments: boolean | undefined;
    announcement: string | undefined;
    siteName: string | undefined;
    motto: string | undefined;
    runTime: moment.Moment;
    copyright: string | undefined;
    description: string | undefined;
    keyword: string | undefined;
    filing: string | undefined;

    constructor(data?: IBlogSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["logo"])) {
                this.logo = [] as any;
                for (let item of _data["logo"])
                    this.logo.push(ImgInfo.fromJS(item));
            }
            this.logoUrl = _data["logoUrl"];
            if (Array.isArray(_data["favicon"])) {
                this.favicon = [] as any;
                for (let item of _data["favicon"])
                    this.favicon.push(ImgInfo.fromJS(item));
            }
            this.faviconUrl = _data["faviconUrl"];
            this.isRewards = _data["isRewards"];
            if (Array.isArray(_data["aliPay"])) {
                this.aliPay = [] as any;
                for (let item of _data["aliPay"])
                    this.aliPay.push(ImgInfo.fromJS(item));
            }
            this.aliPayUrl = _data["aliPayUrl"];
            if (Array.isArray(_data["wxPay"])) {
                this.wxPay = [] as any;
                for (let item of _data["wxPay"])
                    this.wxPay.push(ImgInfo.fromJS(item));
            }
            this.wxPayUrl = _data["wxPayUrl"];
            this.isAllowMessage = _data["isAllowMessage"];
            this.isAllowComments = _data["isAllowComments"];
            this.announcement = _data["announcement"];
            this.siteName = _data["siteName"];
            this.motto = _data["motto"];
            this.runTime = _data["runTime"] ? moment(_data["runTime"].toString()) : <any>undefined;
            this.copyright = _data["copyright"];
            this.description = _data["description"];
            this.keyword = _data["keyword"];
            this.filing = _data["filing"];
        }
    }

    static fromJS(data: any): BlogSetting {
        data = typeof data === 'object' ? data : {};
        let result = new BlogSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.logo)) {
            data["logo"] = [];
            for (let item of this.logo)
                data["logo"].push(item.toJSON());
        }
        data["logoUrl"] = this.logoUrl;
        if (Array.isArray(this.favicon)) {
            data["favicon"] = [];
            for (let item of this.favicon)
                data["favicon"].push(item.toJSON());
        }
        data["faviconUrl"] = this.faviconUrl;
        data["isRewards"] = this.isRewards;
        if (Array.isArray(this.aliPay)) {
            data["aliPay"] = [];
            for (let item of this.aliPay)
                data["aliPay"].push(item.toJSON());
        }
        data["aliPayUrl"] = this.aliPayUrl;
        if (Array.isArray(this.wxPay)) {
            data["wxPay"] = [];
            for (let item of this.wxPay)
                data["wxPay"].push(item.toJSON());
        }
        data["wxPayUrl"] = this.wxPayUrl;
        data["isAllowMessage"] = this.isAllowMessage;
        data["isAllowComments"] = this.isAllowComments;
        data["announcement"] = this.announcement;
        data["siteName"] = this.siteName;
        data["motto"] = this.motto;
        data["runTime"] = this.runTime ? this.runTime.toISOString() : <any>undefined;
        data["copyright"] = this.copyright;
        data["description"] = this.description;
        data["keyword"] = this.keyword;
        data["filing"] = this.filing;
        return data;
    }

    clone(): BlogSetting {
        const json = this.toJSON();
        let result = new BlogSetting();
        result.init(json);
        return result;
    }
}

export interface IBlogSetting {
    logo: ImgInfo[] | undefined;
    logoUrl: string | undefined;
    favicon: ImgInfo[] | undefined;
    faviconUrl: string | undefined;
    isRewards: boolean | undefined;
    aliPay: ImgInfo[] | undefined;
    aliPayUrl: string | undefined;
    wxPay: ImgInfo[] | undefined;
    wxPayUrl: string | undefined;
    isAllowMessage: boolean | undefined;
    isAllowComments: boolean | undefined;
    announcement: string | undefined;
    siteName: string | undefined;
    motto: string | undefined;
    runTime: moment.Moment;
    copyright: string | undefined;
    description: string | undefined;
    keyword: string | undefined;
    filing: string | undefined;
}

export class BloggerInfo implements IBloggerInfo {
    avatar: ImgInfo[] | undefined;
    avatarUrl: string | undefined;
    nikeName: string | undefined;
    qq: string | undefined;
    github: string | undefined;
    gitee: string | undefined;
    motto: string | undefined;
    about: string | undefined;
    donation: string | undefined;

    constructor(data?: IBloggerInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["avatar"])) {
                this.avatar = [] as any;
                for (let item of _data["avatar"])
                    this.avatar.push(ImgInfo.fromJS(item));
            }
            this.avatarUrl = _data["avatarUrl"];
            this.nikeName = _data["nikeName"];
            this.qq = _data["qq"];
            this.github = _data["github"];
            this.gitee = _data["gitee"];
            this.motto = _data["motto"];
            this.about = _data["about"];
            this.donation = _data["donation"];
        }
    }

    static fromJS(data: any): BloggerInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BloggerInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.avatar)) {
            data["avatar"] = [];
            for (let item of this.avatar)
                data["avatar"].push(item.toJSON());
        }
        data["avatarUrl"] = this.avatarUrl;
        data["nikeName"] = this.nikeName;
        data["qq"] = this.qq;
        data["github"] = this.github;
        data["gitee"] = this.gitee;
        data["motto"] = this.motto;
        data["about"] = this.about;
        data["donation"] = this.donation;
        return data;
    }

    clone(): BloggerInfo {
        const json = this.toJSON();
        let result = new BloggerInfo();
        result.init(json);
        return result;
    }
}

export interface IBloggerInfo {
    avatar: ImgInfo[] | undefined;
    avatarUrl: string | undefined;
    nikeName: string | undefined;
    qq: string | undefined;
    github: string | undefined;
    gitee: string | undefined;
    motto: string | undefined;
    about: string | undefined;
    donation: string | undefined;
}

export class CategoryOutput implements ICategoryOutput {
    /** 栏目ID */
    id: string;
    /** 父级ID */
    parentId: string | undefined;
    /** 排序 */
    sort: number;
    /** 栏目名称 */
    name: string | undefined;
    /** 文章条数 */
    total: number;

    constructor(data?: ICategoryOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.parentId = _data["parentId"];
            this.sort = _data["sort"];
            this.name = _data["name"];
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): CategoryOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["sort"] = this.sort;
        data["name"] = this.name;
        data["total"] = this.total;
        return data;
    }

    clone(): CategoryOutput {
        const json = this.toJSON();
        let result = new CategoryOutput();
        result.init(json);
        return result;
    }
}

export interface ICategoryOutput {
    /** 栏目ID */
    id: string;
    /** 父级ID */
    parentId: string | undefined;
    /** 排序 */
    sort: number;
    /** 栏目名称 */
    name: string | undefined;
    /** 文章条数 */
    total: number;
}

export class CategoryPageOutput implements ICategoryPageOutput {
    /** 栏目ID */
    id: string;
    /** 栏目名称 */
    name: string | undefined;
    /** 父级id */
    parentId: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    /** 子栏目 */
    children: CategoryPageOutput[] | undefined;

    constructor(data?: ICategoryPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.cover = _data["cover"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children.push(CategoryPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["cover"] = this.cover;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }

    clone(): CategoryPageOutput {
        const json = this.toJSON();
        let result = new CategoryPageOutput();
        result.init(json);
        return result;
    }
}

export interface ICategoryPageOutput {
    /** 栏目ID */
    id: string;
    /** 栏目名称 */
    name: string | undefined;
    /** 父级id */
    parentId: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 创建时间 */
    creationTime: moment.Moment | undefined;
    /** 子栏目 */
    children: CategoryPageOutput[] | undefined;
}

export class ChangePasswordOutput implements IChangePasswordOutput {
    /** 原密码 */
    originalPwd: string;
    /** 新密码 */
    password: string;

    constructor(data?: IChangePasswordOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.originalPwd = _data["originalPwd"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): ChangePasswordOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalPwd"] = this.originalPwd;
        data["password"] = this.password;
        return data;
    }

    clone(): ChangePasswordOutput {
        const json = this.toJSON();
        let result = new ChangePasswordOutput();
        result.init(json);
        return result;
    }
}

export interface IChangePasswordOutput {
    /** 原密码 */
    originalPwd: string;
    /** 新密码 */
    password: string;
}

export class CommentOutput implements ICommentOutput {
    /** 评论ID */
    id: string;
    /** 博主标识 */
    isBlogger: boolean;
    /** 评论人ID */
    accountId: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    /** 楼层 */
    index: number;
    /** 评论内容 */
    content: string | undefined;
    /** 回复条数 */
    replyCount: number;
    /** 点赞数量 */
    praiseTotal: number;
    /** 是否已点赞 */
    isPraise: boolean;
    /** Ip地址 */
    ip: string | undefined;
    /** Ip归属地 */
    geolocation: string | undefined;
    /** 评论时间 */
    createdTime: moment.Moment | undefined;
    replyList: ReplyOutputPageResult;

    constructor(data?: ICommentOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isBlogger = _data["isBlogger"];
            this.accountId = _data["accountId"];
            this.nickName = _data["nickName"];
            this.avatar = _data["avatar"];
            this.index = _data["index"];
            this.content = _data["content"];
            this.replyCount = _data["replyCount"];
            this.praiseTotal = _data["praiseTotal"];
            this.isPraise = _data["isPraise"];
            this.ip = _data["ip"];
            this.geolocation = _data["geolocation"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            this.replyList = _data["replyList"] ? ReplyOutputPageResult.fromJS(_data["replyList"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CommentOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CommentOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isBlogger"] = this.isBlogger;
        data["accountId"] = this.accountId;
        data["nickName"] = this.nickName;
        data["avatar"] = this.avatar;
        data["index"] = this.index;
        data["content"] = this.content;
        data["replyCount"] = this.replyCount;
        data["praiseTotal"] = this.praiseTotal;
        data["isPraise"] = this.isPraise;
        data["ip"] = this.ip;
        data["geolocation"] = this.geolocation;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["replyList"] = this.replyList ? this.replyList.toJSON() : <any>undefined;
        return data;
    }

    clone(): CommentOutput {
        const json = this.toJSON();
        let result = new CommentOutput();
        result.init(json);
        return result;
    }
}

export interface ICommentOutput {
    /** 评论ID */
    id: string;
    /** 博主标识 */
    isBlogger: boolean;
    /** 评论人ID */
    accountId: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    /** 楼层 */
    index: number;
    /** 评论内容 */
    content: string | undefined;
    /** 回复条数 */
    replyCount: number;
    /** 点赞数量 */
    praiseTotal: number;
    /** 是否已点赞 */
    isPraise: boolean;
    /** Ip地址 */
    ip: string | undefined;
    /** Ip归属地 */
    geolocation: string | undefined;
    /** 评论时间 */
    createdTime: moment.Moment | undefined;
    replyList: ReplyOutputPageResult;
}

export class CommentOutputPageResult implements ICommentOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: CommentOutput[] | undefined;

    constructor(data?: ICommentOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(CommentOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CommentOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new CommentOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): CommentOutputPageResult {
        const json = this.toJSON();
        let result = new CommentOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface ICommentOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: CommentOutput[] | undefined;
}

export class CommentPageQueryInput implements ICommentPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 对应模块ID或评论ID（null表留言，0代表友链的评论） */
    id: string | undefined;

    constructor(data?: ICommentPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CommentPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new CommentPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["id"] = this.id;
        return data;
    }

    clone(): CommentPageQueryInput {
        const json = this.toJSON();
        let result = new CommentPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface ICommentPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 对应模块ID或评论ID（null表留言，0代表友链的评论） */
    id: string | undefined;
}

export enum CoverType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _12 = 12,
}

export class CreateOrUpdateAlbumsInput implements ICreateOrUpdateAlbumsInput {
    id: string | undefined;
    /** 相册名称 */
    name: string;
    /** 封面图 */
    cover: string;
    type: CoverType;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 是否可见 */
    isVisible: boolean;

    constructor(data?: ICreateOrUpdateAlbumsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            this.isVisible = _data["isVisible"];
        }
    }

    static fromJS(data: any): CreateOrUpdateAlbumsInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateAlbumsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        data["isVisible"] = this.isVisible;
        return data;
    }

    clone(): CreateOrUpdateAlbumsInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateAlbumsInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateAlbumsInput {
    id: string | undefined;
    /** 相册名称 */
    name: string;
    /** 封面图 */
    cover: string;
    type: CoverType;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 是否可见 */
    isVisible: boolean;
}

export class CreateOrUpdateArticleCategoryDto implements ICreateOrUpdateArticleCategoryDto {
    articleId: string;
    categoryId: string;

    constructor(data?: ICreateOrUpdateArticleCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.articleId = _data["articleId"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): CreateOrUpdateArticleCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateArticleCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleId"] = this.articleId;
        data["categoryId"] = this.categoryId;
        return data;
    }

    clone(): CreateOrUpdateArticleCategoryDto {
        const json = this.toJSON();
        let result = new CreateOrUpdateArticleCategoryDto();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateArticleCategoryDto {
    articleId: string;
    categoryId: string;
}

export class CreateOrUpdateArticleInput implements ICreateOrUpdateArticleInput {
    /** 标题 */
    title: string;
    /** 概要 */
    summary: string;
    /** 封面图 */
    cover: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 作者 */
    author: string;
    /** 原文地址 */
    link: string | undefined;
    creationType: CreationType;
    /** 文章正文（Html或markdown） */
    content: string;
    /** 文章正文是否为html代码 */
    isHtml: boolean;
    /** 发布时间 */
    publishTime: moment.Moment;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 过期时间（过期后文章不显示） */
    expiredTime: moment.Moment | undefined;
    /** 标签 */
    tags: string[];
    /** 栏目ID */
    categoryId: string;
    /** 文章ID */
    id: string | undefined;

    constructor(data?: ICreateOrUpdateArticleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.tags = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.summary = _data["summary"];
            this.cover = _data["cover"];
            this.isTop = _data["isTop"];
            this.author = _data["author"];
            this.link = _data["link"];
            this.creationType = _data["creationType"];
            this.content = _data["content"];
            this.isHtml = _data["isHtml"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.isAllowComments = _data["isAllowComments"];
            this.expiredTime = _data["expiredTime"] ? moment(_data["expiredTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags.push(item);
            }
            this.categoryId = _data["categoryId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateArticleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateArticleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["summary"] = this.summary;
        data["cover"] = this.cover;
        data["isTop"] = this.isTop;
        data["author"] = this.author;
        data["link"] = this.link;
        data["creationType"] = this.creationType;
        data["content"] = this.content;
        data["isHtml"] = this.isHtml;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["isAllowComments"] = this.isAllowComments;
        data["expiredTime"] = this.expiredTime ? this.expiredTime.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["categoryId"] = this.categoryId;
        data["id"] = this.id;
        return data;
    }

    clone(): CreateOrUpdateArticleInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateArticleInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateArticleInput {
    /** 标题 */
    title: string;
    /** 概要 */
    summary: string;
    /** 封面图 */
    cover: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 作者 */
    author: string;
    /** 原文地址 */
    link: string | undefined;
    creationType: CreationType;
    /** 文章正文（Html或markdown） */
    content: string;
    /** 文章正文是否为html代码 */
    isHtml: boolean;
    /** 发布时间 */
    publishTime: moment.Moment;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 过期时间（过期后文章不显示） */
    expiredTime: moment.Moment | undefined;
    /** 标签 */
    tags: string[];
    /** 栏目ID */
    categoryId: string;
    /** 文章ID */
    id: string | undefined;
}

export class CreateOrUpdateFriendInput implements ICreateOrUpdateFriendInput {
    id: string | undefined;
    /** 网站名称 */
    siteName: string;
    /** 网站链接 */
    link: string;
    /** 网站logo */
    logo: string;
    /** 对方博客友链的地址 */
    url: string | undefined;
    /** 是否忽略对方站点是否存在本站链接 */
    isIgnoreCheck: boolean;
    /** 备注 */
    remark: string | undefined;
    /** 排序值（值越小越靠前） */
    sort: number;
    status: AvailabilityStatus;

    constructor(data?: ICreateOrUpdateFriendInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.siteName = _data["siteName"];
            this.link = _data["link"];
            this.logo = _data["logo"];
            this.url = _data["url"];
            this.isIgnoreCheck = _data["isIgnoreCheck"];
            this.remark = _data["remark"];
            this.sort = _data["sort"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): CreateOrUpdateFriendInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateFriendInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["siteName"] = this.siteName;
        data["link"] = this.link;
        data["logo"] = this.logo;
        data["url"] = this.url;
        data["isIgnoreCheck"] = this.isIgnoreCheck;
        data["remark"] = this.remark;
        data["sort"] = this.sort;
        data["status"] = this.status;
        return data;
    }

    clone(): CreateOrUpdateFriendInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateFriendInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateFriendInput {
    id: string | undefined;
    /** 网站名称 */
    siteName: string;
    /** 网站链接 */
    link: string;
    /** 网站logo */
    logo: string;
    /** 对方博客友链的地址 */
    url: string | undefined;
    /** 是否忽略对方站点是否存在本站链接 */
    isIgnoreCheck: boolean;
    /** 备注 */
    remark: string | undefined;
    /** 排序值（值越小越靠前） */
    sort: number;
    status: AvailabilityStatus;
}

export class CreateOrUpdateTagInput implements ICreateOrUpdateTagInput {
    /** 文章ID */
    id: string | undefined;
    /** 标签名称 */
    name: string;
    /** 封面图 */
    cover: string;
    /** 标签颜色 */
    color: string | undefined;
    /** 标签图标 */
    icon: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ICreateOrUpdateTagInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CreateOrUpdateTagInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateTagInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        return data;
    }

    clone(): CreateOrUpdateTagInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateTagInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateTagInput {
    /** 文章ID */
    id: string | undefined;
    /** 标签名称 */
    name: string;
    /** 封面图 */
    cover: string;
    /** 标签颜色 */
    color: string | undefined;
    /** 标签图标 */
    icon: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
}

export class CreateOrUpdateTalksInput implements ICreateOrUpdateTalksInput {
    id: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 说说正文 */
    content: string;
    /** 图片 */
    images: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    status: AvailabilityStatus;

    constructor(data?: ICreateOrUpdateTalksInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isTop = _data["isTop"];
            this.content = _data["content"];
            this.images = _data["images"];
            this.isAllowComments = _data["isAllowComments"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): CreateOrUpdateTalksInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateTalksInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isTop"] = this.isTop;
        data["content"] = this.content;
        data["images"] = this.images;
        data["isAllowComments"] = this.isAllowComments;
        data["status"] = this.status;
        return data;
    }

    clone(): CreateOrUpdateTalksInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateTalksInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateTalksInput {
    id: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 说说正文 */
    content: string;
    /** 图片 */
    images: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    status: AvailabilityStatus;
}

export enum CreationType {
    _0 = 0,
    _1 = 1,
}

export class CustomConfigDetailOutput implements ICustomConfigDetailOutput {
    /** 表单渲染Json */
    formJson: string | undefined;
    /** 表单数据 */
    dataJson: string | undefined;
    /** 配置项Id */
    itemId: string | undefined;

    constructor(data?: ICustomConfigDetailOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.formJson = _data["formJson"];
            this.dataJson = _data["dataJson"];
            this.itemId = _data["itemId"];
        }
    }

    static fromJS(data: any): CustomConfigDetailOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CustomConfigDetailOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["formJson"] = this.formJson;
        data["dataJson"] = this.dataJson;
        data["itemId"] = this.itemId;
        return data;
    }

    clone(): CustomConfigDetailOutput {
        const json = this.toJSON();
        let result = new CustomConfigDetailOutput();
        result.init(json);
        return result;
    }
}

export interface ICustomConfigDetailOutput {
    /** 表单渲染Json */
    formJson: string | undefined;
    /** 表单数据 */
    dataJson: string | undefined;
    /** 配置项Id */
    itemId: string | undefined;
}

export class CustomConfigItemQueryInput implements ICustomConfigItemQueryInput {
    pageNo: number;
    pageSize: number;
    /** 配置ID */
    id: string;

    constructor(data?: ICustomConfigItemQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CustomConfigItemQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new CustomConfigItemQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["id"] = this.id;
        return data;
    }

    clone(): CustomConfigItemQueryInput {
        const json = this.toJSON();
        let result = new CustomConfigItemQueryInput();
        result.init(json);
        return result;
    }
}

export interface ICustomConfigItemQueryInput {
    pageNo: number;
    pageSize: number;
    /** 配置ID */
    id: string;
}

export class CustomConfigPageOutput implements ICustomConfigPageOutput {
    /** 自定义配置Id */
    id: string;
    status: AvailabilityStatus;
    /** 备注 */
    remark: string | undefined;
    /** 配置名称 */
    name: string | undefined;
    /** 唯一编码 */
    code: string | undefined;
    /** 是否是多项配置 */
    isMultiple: boolean;
    /** 是否允许创建实体 */
    allowCreationEntity: boolean;
    /** 配置id */
    configItemId: string[] | undefined;
    /** 是否已生成实体 */
    isGenerate: boolean;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: ICustomConfigPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
            this.remark = _data["remark"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.isMultiple = _data["isMultiple"];
            this.allowCreationEntity = _data["allowCreationEntity"];
            if (Array.isArray(_data["configItemId"])) {
                this.configItemId = [] as any;
                for (let item of _data["configItemId"])
                    this.configItemId.push(item);
            }
            this.isGenerate = _data["isGenerate"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CustomConfigPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CustomConfigPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["remark"] = this.remark;
        data["name"] = this.name;
        data["code"] = this.code;
        data["isMultiple"] = this.isMultiple;
        data["allowCreationEntity"] = this.allowCreationEntity;
        if (Array.isArray(this.configItemId)) {
            data["configItemId"] = [];
            for (let item of this.configItemId)
                data["configItemId"].push(item);
        }
        data["isGenerate"] = this.isGenerate;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): CustomConfigPageOutput {
        const json = this.toJSON();
        let result = new CustomConfigPageOutput();
        result.init(json);
        return result;
    }
}

export interface ICustomConfigPageOutput {
    /** 自定义配置Id */
    id: string;
    status: AvailabilityStatus;
    /** 备注 */
    remark: string | undefined;
    /** 配置名称 */
    name: string | undefined;
    /** 唯一编码 */
    code: string | undefined;
    /** 是否是多项配置 */
    isMultiple: boolean;
    /** 是否允许创建实体 */
    allowCreationEntity: boolean;
    /** 配置id */
    configItemId: string[] | undefined;
    /** 是否已生成实体 */
    isGenerate: boolean;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
}

export class CustomConfigPageOutputPageResult implements ICustomConfigPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: CustomConfigPageOutput[] | undefined;

    constructor(data?: ICustomConfigPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(CustomConfigPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomConfigPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new CustomConfigPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): CustomConfigPageOutputPageResult {
        const json = this.toJSON();
        let result = new CustomConfigPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface ICustomConfigPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: CustomConfigPageOutput[] | undefined;
}

export class CustomConfigQueryInput implements ICustomConfigQueryInput {
    pageNo: number;
    pageSize: number;
    /** 配置名称 */
    name: string | undefined;
    /** 配置唯一编码 */
    code: string | undefined;

    constructor(data?: ICustomConfigQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.name = _data["name"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CustomConfigQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new CustomConfigQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["name"] = this.name;
        data["code"] = this.code;
        return data;
    }

    clone(): CustomConfigQueryInput {
        const json = this.toJSON();
        let result = new CustomConfigQueryInput();
        result.init(json);
        return result;
    }
}

export interface ICustomConfigQueryInput {
    pageNo: number;
    pageSize: number;
    /** 配置名称 */
    name: string | undefined;
    /** 配置唯一编码 */
    code: string | undefined;
}

export class CustomConfigSetJsonInput implements ICustomConfigSetJsonInput {
    /** 自定义配置ID */
    id: string;
    /** 表单设计 */
    json: string;

    constructor(data?: ICustomConfigSetJsonInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.json = _data["json"];
        }
    }

    static fromJS(data: any): CustomConfigSetJsonInput {
        data = typeof data === 'object' ? data : {};
        let result = new CustomConfigSetJsonInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["json"] = this.json;
        return data;
    }

    clone(): CustomConfigSetJsonInput {
        const json = this.toJSON();
        let result = new CustomConfigSetJsonInput();
        result.init(json);
        return result;
    }
}

export interface ICustomConfigSetJsonInput {
    /** 自定义配置ID */
    id: string;
    /** 表单设计 */
    json: string;
}

export class FriendLinkOutput implements IFriendLinkOutput {
    /** 友链ID */
    id: string;
    /** 友链 */
    link: string | undefined;
    /** logo */
    logo: string | undefined;
    /** 站点名称 */
    siteName: string | undefined;
    /** 网站描述 */
    remark: string | undefined;

    constructor(data?: IFriendLinkOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.link = _data["link"];
            this.logo = _data["logo"];
            this.siteName = _data["siteName"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): FriendLinkOutput {
        data = typeof data === 'object' ? data : {};
        let result = new FriendLinkOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["link"] = this.link;
        data["logo"] = this.logo;
        data["siteName"] = this.siteName;
        data["remark"] = this.remark;
        return data;
    }

    clone(): FriendLinkOutput {
        const json = this.toJSON();
        let result = new FriendLinkOutput();
        result.init(json);
        return result;
    }
}

export interface IFriendLinkOutput {
    /** 友链ID */
    id: string;
    /** 友链 */
    link: string | undefined;
    /** logo */
    logo: string | undefined;
    /** 站点名称 */
    siteName: string | undefined;
    /** 网站描述 */
    remark: string | undefined;
}

export class FriendLinkPageOutput implements IFriendLinkPageOutput {
    /** 友情链接主键 */
    id: string;
    status: AvailabilityStatus;
    /** 站点名称 */
    siteName: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    /** 忽略站点检查 */
    isIgnoreCheck: boolean;
    /** 友链 */
    link: string | undefined;
    /** Logo链接 */
    logo: string | undefined;
    /** 对方博客友情链接地址 */
    url: string | undefined;
    /** 排序 */
    sort: number;
    /** 描述 */
    remark: string | undefined;

    constructor(data?: IFriendLinkPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
            this.siteName = _data["siteName"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            this.isIgnoreCheck = _data["isIgnoreCheck"];
            this.link = _data["link"];
            this.logo = _data["logo"];
            this.url = _data["url"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): FriendLinkPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new FriendLinkPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["siteName"] = this.siteName;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["isIgnoreCheck"] = this.isIgnoreCheck;
        data["link"] = this.link;
        data["logo"] = this.logo;
        data["url"] = this.url;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        return data;
    }

    clone(): FriendLinkPageOutput {
        const json = this.toJSON();
        let result = new FriendLinkPageOutput();
        result.init(json);
        return result;
    }
}

export interface IFriendLinkPageOutput {
    /** 友情链接主键 */
    id: string;
    status: AvailabilityStatus;
    /** 站点名称 */
    siteName: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    /** 忽略站点检查 */
    isIgnoreCheck: boolean;
    /** 友链 */
    link: string | undefined;
    /** Logo链接 */
    logo: string | undefined;
    /** 对方博客友情链接地址 */
    url: string | undefined;
    /** 排序 */
    sort: number;
    /** 描述 */
    remark: string | undefined;
}

export class FriendLinkPageOutputPageResult implements IFriendLinkPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: FriendLinkPageOutput[] | undefined;

    constructor(data?: IFriendLinkPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(FriendLinkPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FriendLinkPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new FriendLinkPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): FriendLinkPageOutputPageResult {
        const json = this.toJSON();
        let result = new FriendLinkPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IFriendLinkPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: FriendLinkPageOutput[] | undefined;
}

export class FriendLinkPageQueryInput implements IFriendLinkPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 站点名称 */
    siteName: string | undefined;

    constructor(data?: IFriendLinkPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.siteName = _data["siteName"];
        }
    }

    static fromJS(data: any): FriendLinkPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new FriendLinkPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["siteName"] = this.siteName;
        return data;
    }

    clone(): FriendLinkPageQueryInput {
        const json = this.toJSON();
        let result = new FriendLinkPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface IFriendLinkPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 站点名称 */
    siteName: string | undefined;
}

export enum Gender {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class GetConfigDetailInput implements IGetConfigDetailInput {
    id: string;
    itemId: string | undefined;

    constructor(data?: IGetConfigDetailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.itemId = _data["itemId"];
        }
    }

    static fromJS(data: any): GetConfigDetailInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetConfigDetailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["itemId"] = this.itemId;
        return data;
    }

    clone(): GetConfigDetailInput {
        const json = this.toJSON();
        let result = new GetConfigDetailInput();
        result.init(json);
        return result;
    }
}

export interface IGetConfigDetailInput {
    id: string;
    itemId: string | undefined;
}

export class ImgInfo implements IImgInfo {
    name: string | undefined;
    url: string | undefined;

    constructor(data?: IImgInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): ImgInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ImgInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }

    clone(): ImgInfo {
        const json = this.toJSON();
        let result = new ImgInfo();
        result.init(json);
        return result;
    }
}

export interface IImgInfo {
    name: string | undefined;
    url: string | undefined;
}

export class KeyDto implements IKeyDto {
    id: string;

    constructor(data?: IKeyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): KeyDto {
        data = typeof data === 'object' ? data : {};
        let result = new KeyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): KeyDto {
        const json = this.toJSON();
        let result = new KeyDto();
        result.init(json);
        return result;
    }
}

export interface IKeyDto {
    id: string;
}

export class Menu implements IMenu {
    id: string;
    creatorId: string | undefined;
    creationTime: moment.Moment | undefined;
    deleterId: string | undefined;
    deletionTime: moment.Moment | undefined;
    isDeleted: boolean | undefined;
    name: string | undefined;
    type: MenuType;
    code: string | undefined;
    parentId: string | undefined;
    routeName: string | undefined;
    path: string | undefined;
    component: string | undefined;
    redirect: string | undefined;
    icon: string | undefined;
    isIframe: boolean;
    link: string | undefined;
    isVisible: boolean;
    isKeepAlive: boolean;
    isFixed: boolean;
    status: AvailabilityStatus;
    sort: number;
    remark: string | undefined;
    children: Menu[] | undefined;

    constructor(data?: IMenu) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorId = _data["creatorId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.deleterId = _data["deleterId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.routeName = _data["routeName"];
            this.path = _data["path"];
            this.component = _data["component"];
            this.redirect = _data["redirect"];
            this.icon = _data["icon"];
            this.isIframe = _data["isIframe"];
            this.link = _data["link"];
            this.isVisible = _data["isVisible"];
            this.isKeepAlive = _data["isKeepAlive"];
            this.isFixed = _data["isFixed"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children.push(Menu.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Menu {
        data = typeof data === 'object' ? data : {};
        let result = new Menu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorId"] = this.creatorId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["deleterId"] = this.deleterId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["name"] = this.name;
        data["type"] = this.type;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["routeName"] = this.routeName;
        data["path"] = this.path;
        data["component"] = this.component;
        data["redirect"] = this.redirect;
        data["icon"] = this.icon;
        data["isIframe"] = this.isIframe;
        data["link"] = this.link;
        data["isVisible"] = this.isVisible;
        data["isKeepAlive"] = this.isKeepAlive;
        data["isFixed"] = this.isFixed;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }

    clone(): Menu {
        const json = this.toJSON();
        let result = new Menu();
        result.init(json);
        return result;
    }
}

export interface IMenu {
    id: string;
    creatorId: string | undefined;
    creationTime: moment.Moment | undefined;
    deleterId: string | undefined;
    deletionTime: moment.Moment | undefined;
    isDeleted: boolean | undefined;
    name: string | undefined;
    type: MenuType;
    code: string | undefined;
    parentId: string | undefined;
    routeName: string | undefined;
    path: string | undefined;
    component: string | undefined;
    redirect: string | undefined;
    icon: string | undefined;
    isIframe: boolean;
    link: string | undefined;
    isVisible: boolean;
    isKeepAlive: boolean;
    isFixed: boolean;
    status: AvailabilityStatus;
    sort: number;
    remark: string | undefined;
    children: Menu[] | undefined;
}

export class MenuDetailOutput implements IMenuDetailOutput {
    /** 菜单Id */
    id: string;
    /** 菜单名称 */
    name: string | undefined;
    /** 父级id */
    parentId: string | undefined;
    status: AvailabilityStatus;
    /** 权限标识 */
    code: string | undefined;
    /** 排序 */
    sort: number;
    /** 组件路径 */
    component: string | undefined;
    /** 图标 */
    icon: string | undefined;
    /** 是否固定 */
    isFixed: boolean;
    /** 是否内嵌 */
    isIframe: boolean;
    /** 是否缓存 */
    isKeepAlive: boolean;
    /** 是否可见 */
    isVisible: boolean;
    /** 外链 */
    link: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 路由地址 */
    path: string | undefined;
    /** 重定向地址 */
    redirect: string | undefined;
    /** 路由名称 */
    routeName: string | undefined;
    type: MenuType;

    constructor(data?: IMenuDetailOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.status = _data["status"];
            this.code = _data["code"];
            this.sort = _data["sort"];
            this.component = _data["component"];
            this.icon = _data["icon"];
            this.isFixed = _data["isFixed"];
            this.isIframe = _data["isIframe"];
            this.isKeepAlive = _data["isKeepAlive"];
            this.isVisible = _data["isVisible"];
            this.link = _data["link"];
            this.remark = _data["remark"];
            this.path = _data["path"];
            this.redirect = _data["redirect"];
            this.routeName = _data["routeName"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): MenuDetailOutput {
        data = typeof data === 'object' ? data : {};
        let result = new MenuDetailOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["status"] = this.status;
        data["code"] = this.code;
        data["sort"] = this.sort;
        data["component"] = this.component;
        data["icon"] = this.icon;
        data["isFixed"] = this.isFixed;
        data["isIframe"] = this.isIframe;
        data["isKeepAlive"] = this.isKeepAlive;
        data["isVisible"] = this.isVisible;
        data["link"] = this.link;
        data["remark"] = this.remark;
        data["path"] = this.path;
        data["redirect"] = this.redirect;
        data["routeName"] = this.routeName;
        data["type"] = this.type;
        return data;
    }

    clone(): MenuDetailOutput {
        const json = this.toJSON();
        let result = new MenuDetailOutput();
        result.init(json);
        return result;
    }
}

export interface IMenuDetailOutput {
    /** 菜单Id */
    id: string;
    /** 菜单名称 */
    name: string | undefined;
    /** 父级id */
    parentId: string | undefined;
    status: AvailabilityStatus;
    /** 权限标识 */
    code: string | undefined;
    /** 排序 */
    sort: number;
    /** 组件路径 */
    component: string | undefined;
    /** 图标 */
    icon: string | undefined;
    /** 是否固定 */
    isFixed: boolean;
    /** 是否内嵌 */
    isIframe: boolean;
    /** 是否缓存 */
    isKeepAlive: boolean;
    /** 是否可见 */
    isVisible: boolean;
    /** 外链 */
    link: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 路由地址 */
    path: string | undefined;
    /** 重定向地址 */
    redirect: string | undefined;
    /** 路由名称 */
    routeName: string | undefined;
    type: MenuType;
}

export class MenuPageOutput implements IMenuPageOutput {
    /** 菜单Id */
    id: string;
    /** 菜单名称 */
    name: string | undefined;
    /** 权限标识 */
    code: string | undefined;
    /** 菜单图标 */
    icon: string | undefined;
    type: MenuType;
    /** 路由地址 */
    path: string | undefined;
    /** 组件路径 */
    component: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    /** 子菜单 */
    children: MenuPageOutput[] | undefined;

    constructor(data?: IMenuPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.icon = _data["icon"];
            this.type = _data["type"];
            this.path = _data["path"];
            this.component = _data["component"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children.push(MenuPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MenuPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new MenuPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["icon"] = this.icon;
        data["type"] = this.type;
        data["path"] = this.path;
        data["component"] = this.component;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }

    clone(): MenuPageOutput {
        const json = this.toJSON();
        let result = new MenuPageOutput();
        result.init(json);
        return result;
    }
}

export interface IMenuPageOutput {
    /** 菜单Id */
    id: string;
    /** 菜单名称 */
    name: string | undefined;
    /** 权限标识 */
    code: string | undefined;
    /** 菜单图标 */
    icon: string | undefined;
    type: MenuType;
    /** 路由地址 */
    path: string | undefined;
    /** 组件路径 */
    component: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    /** 子菜单 */
    children: MenuPageOutput[] | undefined;
}

export enum MenuType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class OAuthAccountDetailOutput implements IOAuthAccountDetailOutput {
    /** 用户ID */
    id: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    status: AvailabilityStatus;
    /** 网站链接 */
    link: string | undefined;
    /** logo */
    logo: string | undefined;
    /** 网站名称 */
    siteName: string | undefined;
    /** 对方博客友链地址 */
    url: string | undefined;
    /** 网站介绍 */
    remark: string | undefined;

    constructor(data?: IOAuthAccountDetailOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nickName = _data["nickName"];
            this.avatar = _data["avatar"];
            this.status = _data["status"];
            this.link = _data["link"];
            this.logo = _data["logo"];
            this.siteName = _data["siteName"];
            this.url = _data["url"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): OAuthAccountDetailOutput {
        data = typeof data === 'object' ? data : {};
        let result = new OAuthAccountDetailOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nickName"] = this.nickName;
        data["avatar"] = this.avatar;
        data["status"] = this.status;
        data["link"] = this.link;
        data["logo"] = this.logo;
        data["siteName"] = this.siteName;
        data["url"] = this.url;
        data["remark"] = this.remark;
        return data;
    }

    clone(): OAuthAccountDetailOutput {
        const json = this.toJSON();
        let result = new OAuthAccountDetailOutput();
        result.init(json);
        return result;
    }
}

export interface IOAuthAccountDetailOutput {
    /** 用户ID */
    id: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    status: AvailabilityStatus;
    /** 网站链接 */
    link: string | undefined;
    /** logo */
    logo: string | undefined;
    /** 网站名称 */
    siteName: string | undefined;
    /** 对方博客友链地址 */
    url: string | undefined;
    /** 网站介绍 */
    remark: string | undefined;
}

export class Pagination implements IPagination {
    pageNo: number;
    pageSize: number;

    constructor(data?: IPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        return data;
    }

    clone(): Pagination {
        const json = this.toJSON();
        let result = new Pagination();
        result.init(json);
        return result;
    }
}

export interface IPagination {
    pageNo: number;
    pageSize: number;
}

export class PictureOutput implements IPictureOutput {
    /** 图片ID */
    id: string;
    /** 图片地址 */
    url: string | undefined;

    constructor(data?: IPictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): PictureOutput {
        data = typeof data === 'object' ? data : {};
        let result = new PictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        return data;
    }

    clone(): PictureOutput {
        const json = this.toJSON();
        let result = new PictureOutput();
        result.init(json);
        return result;
    }
}

export interface IPictureOutput {
    /** 图片ID */
    id: string;
    /** 图片地址 */
    url: string | undefined;
}

export class PictureOutputPageResult implements IPictureOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: PictureOutput[] | undefined;

    constructor(data?: IPictureOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(PictureOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PictureOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new PictureOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): PictureOutputPageResult {
        const json = this.toJSON();
        let result = new PictureOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IPictureOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: PictureOutput[] | undefined;
}

export class PicturesPageOutput implements IPicturesPageOutput {
    id: string;
    url: string | undefined;

    constructor(data?: IPicturesPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): PicturesPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new PicturesPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        return data;
    }

    clone(): PicturesPageOutput {
        const json = this.toJSON();
        let result = new PicturesPageOutput();
        result.init(json);
        return result;
    }
}

export interface IPicturesPageOutput {
    id: string;
    url: string | undefined;
}

export class PicturesPageOutputPageResult implements IPicturesPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: PicturesPageOutput[] | undefined;

    constructor(data?: IPicturesPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(PicturesPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PicturesPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new PicturesPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): PicturesPageOutputPageResult {
        const json = this.toJSON();
        let result = new PicturesPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IPicturesPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: PicturesPageOutput[] | undefined;
}

export class PicturesPageQueryInput implements IPicturesPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 相册ID */
    id: string;

    constructor(data?: IPicturesPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): PicturesPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new PicturesPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["id"] = this.id;
        return data;
    }

    clone(): PicturesPageQueryInput {
        const json = this.toJSON();
        let result = new PicturesPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface IPicturesPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 相册ID */
    id: string;
}

export class QueryUserInput implements IQueryUserInput {
    pageNo: number;
    pageSize: number;
    /** 账号 */
    userName: string | undefined;
    /** 组织机构Id */
    orgId: string | undefined;
    /** 手机号 */
    mobile: string | undefined;
    /** 姓名 */
    name: string | undefined;

    constructor(data?: IQueryUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.userName = _data["userName"];
            this.orgId = _data["orgId"];
            this.mobile = _data["mobile"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): QueryUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new QueryUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["userName"] = this.userName;
        data["orgId"] = this.orgId;
        data["mobile"] = this.mobile;
        data["name"] = this.name;
        return data;
    }

    clone(): QueryUserInput {
        const json = this.toJSON();
        let result = new QueryUserInput();
        result.init(json);
        return result;
    }
}

export interface IQueryUserInput {
    pageNo: number;
    pageSize: number;
    /** 账号 */
    userName: string | undefined;
    /** 组织机构Id */
    orgId: string | undefined;
    /** 手机号 */
    mobile: string | undefined;
    /** 姓名 */
    name: string | undefined;
}

export class ReplyOutput implements IReplyOutput {
    /** 评论ID */
    id: string;
    /** 评论内容 */
    content: string | undefined;
    /** 博主标识 */
    isBlogger: boolean;
    /** 顶级楼层评论ID */
    rootId: string | undefined;
    /** 上级评论ID */
    parentId: string | undefined;
    /** 当前评论人ID */
    accountId: string | undefined;
    /** 回复人ID */
    replyAccountId: string | undefined;
    /** 当前人昵称 */
    nickName: string | undefined;
    /** 回复人昵称 */
    relyNickName: string | undefined;
    /** 当前评论人头像 */
    avatar: string | undefined;
    /** Ip地址 */
    ip: string | undefined;
    /** 点赞数量 */
    praiseTotal: number;
    /** 是否已点赞 */
    isPraise: boolean;
    /** Ip所属地 */
    geolocation: string | undefined;
    /** 评论时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: IReplyOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
            this.isBlogger = _data["isBlogger"];
            this.rootId = _data["rootId"];
            this.parentId = _data["parentId"];
            this.accountId = _data["accountId"];
            this.replyAccountId = _data["replyAccountId"];
            this.nickName = _data["nickName"];
            this.relyNickName = _data["relyNickName"];
            this.avatar = _data["avatar"];
            this.ip = _data["ip"];
            this.praiseTotal = _data["praiseTotal"];
            this.isPraise = _data["isPraise"];
            this.geolocation = _data["geolocation"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ReplyOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        data["isBlogger"] = this.isBlogger;
        data["rootId"] = this.rootId;
        data["parentId"] = this.parentId;
        data["accountId"] = this.accountId;
        data["replyAccountId"] = this.replyAccountId;
        data["nickName"] = this.nickName;
        data["relyNickName"] = this.relyNickName;
        data["avatar"] = this.avatar;
        data["ip"] = this.ip;
        data["praiseTotal"] = this.praiseTotal;
        data["isPraise"] = this.isPraise;
        data["geolocation"] = this.geolocation;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): ReplyOutput {
        const json = this.toJSON();
        let result = new ReplyOutput();
        result.init(json);
        return result;
    }
}

export interface IReplyOutput {
    /** 评论ID */
    id: string;
    /** 评论内容 */
    content: string | undefined;
    /** 博主标识 */
    isBlogger: boolean;
    /** 顶级楼层评论ID */
    rootId: string | undefined;
    /** 上级评论ID */
    parentId: string | undefined;
    /** 当前评论人ID */
    accountId: string | undefined;
    /** 回复人ID */
    replyAccountId: string | undefined;
    /** 当前人昵称 */
    nickName: string | undefined;
    /** 回复人昵称 */
    relyNickName: string | undefined;
    /** 当前评论人头像 */
    avatar: string | undefined;
    /** Ip地址 */
    ip: string | undefined;
    /** 点赞数量 */
    praiseTotal: number;
    /** 是否已点赞 */
    isPraise: boolean;
    /** Ip所属地 */
    geolocation: string | undefined;
    /** 评论时间 */
    createdTime: moment.Moment | undefined;
}

export class ReplyOutputPageResult implements IReplyOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ReplyOutput[] | undefined;

    constructor(data?: IReplyOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(ReplyOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReplyOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): ReplyOutputPageResult {
        const json = this.toJSON();
        let result = new ReplyOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IReplyOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ReplyOutput[] | undefined;
}

export class ResetPasswordInput implements IResetPasswordInput {
    id: string | undefined;
    /** 密码 */
    password: string;

    constructor(data?: IResetPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["password"] = this.password;
        return data;
    }

    clone(): ResetPasswordInput {
        const json = this.toJSON();
        let result = new ResetPasswordInput();
        result.init(json);
        return result;
    }
}

export interface IResetPasswordInput {
    id: string | undefined;
    /** 密码 */
    password: string;
}

export class RolePageOutput implements IRolePageOutput {
    /** 主键 */
    id: string | undefined;
    /** 角色名称 */
    name: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    status: AvailabilityStatus;
    /** 角色编码 */
    code: string | undefined;
    /** 排序值 */
    sort: number;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: IRolePageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.code = _data["code"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RolePageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RolePageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["code"] = this.code;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        return data;
    }

    clone(): RolePageOutput {
        const json = this.toJSON();
        let result = new RolePageOutput();
        result.init(json);
        return result;
    }
}

export interface IRolePageOutput {
    /** 主键 */
    id: string | undefined;
    /** 角色名称 */
    name: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    status: AvailabilityStatus;
    /** 角色编码 */
    code: string | undefined;
    /** 排序值 */
    sort: number;
    /** 备注 */
    remark: string | undefined;
}

export class RolePageOutputPageResult implements IRolePageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: RolePageOutput[] | undefined;

    constructor(data?: IRolePageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(RolePageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RolePageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new RolePageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): RolePageOutputPageResult {
        const json = this.toJSON();
        let result = new RolePageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IRolePageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: RolePageOutput[] | undefined;
}

export class RoleQueryInput implements IRoleQueryInput {
    pageNo: number;
    pageSize: number;
    /** 角色名称 */
    name: string | undefined;

    constructor(data?: IRoleQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): RoleQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new RoleQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["name"] = this.name;
        return data;
    }

    clone(): RoleQueryInput {
        const json = this.toJSON();
        let result = new RoleQueryInput();
        result.init(json);
        return result;
    }
}

export interface IRoleQueryInput {
    pageNo: number;
    pageSize: number;
    /** 角色名称 */
    name: string | undefined;
}

export class RouterMetaOutput implements IRouterMetaOutput {
    /** 标题 */
    title: string | undefined;
    /** 外链 */
    isLink: string | undefined;
    /** 是否隐藏 */
    isHide: boolean;
    /** 是否缓存 */
    isKeepAlive: boolean;
    /** 是否固定 */
    isAffix: boolean;
    /** 菜单 */
    icon: string | undefined;
    type: MenuType;

    constructor(data?: IRouterMetaOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.isLink = _data["isLink"];
            this.isHide = _data["isHide"];
            this.isKeepAlive = _data["isKeepAlive"];
            this.isAffix = _data["isAffix"];
            this.icon = _data["icon"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): RouterMetaOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RouterMetaOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["isLink"] = this.isLink;
        data["isHide"] = this.isHide;
        data["isKeepAlive"] = this.isKeepAlive;
        data["isAffix"] = this.isAffix;
        data["icon"] = this.icon;
        data["type"] = this.type;
        return data;
    }

    clone(): RouterMetaOutput {
        const json = this.toJSON();
        let result = new RouterMetaOutput();
        result.init(json);
        return result;
    }
}

export interface IRouterMetaOutput {
    /** 标题 */
    title: string | undefined;
    /** 外链 */
    isLink: string | undefined;
    /** 是否隐藏 */
    isHide: boolean;
    /** 是否缓存 */
    isKeepAlive: boolean;
    /** 是否固定 */
    isAffix: boolean;
    /** 菜单 */
    icon: string | undefined;
    type: MenuType;
}

export class RouterOutput implements IRouterOutput {
    /** 路由名称 */
    name: string | undefined;
    /** 路由地址 */
    path: string | undefined;
    /** 组件 */
    component: string | undefined;
    meta: RouterMetaOutput;
    /** 子菜单 */
    children: RouterOutput[] | undefined;

    constructor(data?: IRouterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.path = _data["path"];
            this.component = _data["component"];
            this.meta = _data["meta"] ? RouterMetaOutput.fromJS(_data["meta"]) : <any>undefined;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children.push(RouterOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RouterOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RouterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["path"] = this.path;
        data["component"] = this.component;
        data["meta"] = this.meta ? this.meta.toJSON() : <any>undefined;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }

    clone(): RouterOutput {
        const json = this.toJSON();
        let result = new RouterOutput();
        result.init(json);
        return result;
    }
}

export interface IRouterOutput {
    /** 路由名称 */
    name: string | undefined;
    /** 路由地址 */
    path: string | undefined;
    /** 组件 */
    component: string | undefined;
    meta: RouterMetaOutput;
    /** 子菜单 */
    children: RouterOutput[] | undefined;
}

export class SelectOutput implements ISelectOutput {
    label: string | undefined;
    value: any | undefined;

    constructor(data?: ISelectOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): SelectOutput {
        data = typeof data === 'object' ? data : {};
        let result = new SelectOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }

    clone(): SelectOutput {
        const json = this.toJSON();
        let result = new SelectOutput();
        result.init(json);
        return result;
    }
}

export interface ISelectOutput {
    label: string | undefined;
    value: any | undefined;
}

export class StringPageResult implements IStringPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: string[] | undefined;

    constructor(data?: IStringPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(item);
            }
        }
    }

    static fromJS(data: any): StringPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new StringPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item);
        }
        return data;
    }

    clone(): StringPageResult {
        const json = this.toJSON();
        let result = new StringPageResult();
        result.init(json);
        return result;
    }
}

export interface IStringPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: string[] | undefined;
}

export class SysOrgPageOutput implements ISysOrgPageOutput {
    /** 组织机构Id */
    id: string | undefined;
    /** 父级Id */
    parentId: string | undefined;
    /** 部门名称 */
    name: string | undefined;
    /** 部门编码 */
    code: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    children: SysOrgPageOutput[] | undefined;

    constructor(data?: ISysOrgPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.parentId = _data["parentId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children.push(SysOrgPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysOrgPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new SysOrgPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }

    clone(): SysOrgPageOutput {
        const json = this.toJSON();
        let result = new SysOrgPageOutput();
        result.init(json);
        return result;
    }
}

export interface ISysOrgPageOutput {
    /** 组织机构Id */
    id: string | undefined;
    /** 父级Id */
    parentId: string | undefined;
    /** 部门名称 */
    name: string | undefined;
    /** 部门编码 */
    code: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    children: SysOrgPageOutput[] | undefined;
}

export class TagsOutput implements ITagsOutput {
    /** 标签ID */
    id: string;
    /** 图标 */
    icon: string | undefined;
    /** 标签名称 */
    name: string | undefined;
    /** 颜色 */
    color: string | undefined;

    constructor(data?: ITagsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.icon = _data["icon"];
            this.name = _data["name"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): TagsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TagsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["icon"] = this.icon;
        data["name"] = this.name;
        data["color"] = this.color;
        return data;
    }

    clone(): TagsOutput {
        const json = this.toJSON();
        let result = new TagsOutput();
        result.init(json);
        return result;
    }
}

export interface ITagsOutput {
    /** 标签ID */
    id: string;
    /** 图标 */
    icon: string | undefined;
    /** 标签名称 */
    name: string | undefined;
    /** 颜色 */
    color: string | undefined;
}

export class TagsPageOutput implements ITagsPageOutput {
    /** 标签ID */
    id: string;
    /** 标签名称 */
    name: string | undefined;
    status: AvailabilityStatus;
    /** 排序 */
    sort: number;
    /** 标签封面 */
    cover: string | undefined;
    /** 标签图标 */
    icon: string | undefined;
    /** 标签颜色 */
    color: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: ITagsPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.cover = _data["cover"];
            this.icon = _data["icon"];
            this.color = _data["color"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TagsPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TagsPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["cover"] = this.cover;
        data["icon"] = this.icon;
        data["color"] = this.color;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): TagsPageOutput {
        const json = this.toJSON();
        let result = new TagsPageOutput();
        result.init(json);
        return result;
    }
}

export interface ITagsPageOutput {
    /** 标签ID */
    id: string;
    /** 标签名称 */
    name: string | undefined;
    status: AvailabilityStatus;
    /** 排序 */
    sort: number;
    /** 标签封面 */
    cover: string | undefined;
    /** 标签图标 */
    icon: string | undefined;
    /** 标签颜色 */
    color: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
}

export class TagsPageOutputPageResult implements ITagsPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TagsPageOutput[] | undefined;

    constructor(data?: ITagsPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(TagsPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TagsPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TagsPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): TagsPageOutputPageResult {
        const json = this.toJSON();
        let result = new TagsPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface ITagsPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TagsPageOutput[] | undefined;
}

export class TagsPageQueryInput implements ITagsPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标签名称 */
    name: string | undefined;

    constructor(data?: ITagsPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TagsPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new TagsPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["name"] = this.name;
        return data;
    }

    clone(): TagsPageQueryInput {
        const json = this.toJSON();
        let result = new TagsPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface ITagsPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标签名称 */
    name: string | undefined;
}

export class TalkDetailOutput implements ITalkDetailOutput {
    id: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 点赞数量 */
    upvote: number;
    /** 评论数量 */
    comments: number;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;

    constructor(data?: ITalkDetailOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isTop = _data["isTop"];
            this.content = _data["content"];
            this.images = _data["images"];
            this.isPraise = _data["isPraise"];
            this.upvote = _data["upvote"];
            this.comments = _data["comments"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            this.isAllowComments = _data["isAllowComments"];
        }
    }

    static fromJS(data: any): TalkDetailOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TalkDetailOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isTop"] = this.isTop;
        data["content"] = this.content;
        data["images"] = this.images;
        data["isPraise"] = this.isPraise;
        data["upvote"] = this.upvote;
        data["comments"] = this.comments;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["isAllowComments"] = this.isAllowComments;
        return data;
    }

    clone(): TalkDetailOutput {
        const json = this.toJSON();
        let result = new TalkDetailOutput();
        result.init(json);
        return result;
    }
}

export interface ITalkDetailOutput {
    id: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 点赞数量 */
    upvote: number;
    /** 评论数量 */
    comments: number;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
}

export class TalksOutput implements ITalksOutput {
    id: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 点赞数量 */
    upvote: number;
    /** 评论数量 */
    comments: number;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: ITalksOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isTop = _data["isTop"];
            this.content = _data["content"];
            this.images = _data["images"];
            this.isPraise = _data["isPraise"];
            this.upvote = _data["upvote"];
            this.comments = _data["comments"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TalksOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TalksOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isTop"] = this.isTop;
        data["content"] = this.content;
        data["images"] = this.images;
        data["isPraise"] = this.isPraise;
        data["upvote"] = this.upvote;
        data["comments"] = this.comments;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): TalksOutput {
        const json = this.toJSON();
        let result = new TalksOutput();
        result.init(json);
        return result;
    }
}

export interface ITalksOutput {
    id: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 点赞数量 */
    upvote: number;
    /** 评论数量 */
    comments: number;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;
}

export class TalksOutputPageResult implements ITalksOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TalksOutput[] | undefined;

    constructor(data?: ITalksOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(TalksOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TalksOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TalksOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): TalksOutputPageResult {
        const json = this.toJSON();
        let result = new TalksOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface ITalksOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TalksOutput[] | undefined;
}

export class TalksPageOutput implements ITalksPageOutput {
    /** 主键 */
    id: string;
    status: AvailabilityStatus;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 是否置顶 */
    isTop: boolean;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: ITalksPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
            this.content = _data["content"];
            this.images = _data["images"];
            this.isAllowComments = _data["isAllowComments"];
            this.isPraise = _data["isPraise"];
            this.isTop = _data["isTop"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TalksPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TalksPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["content"] = this.content;
        data["images"] = this.images;
        data["isAllowComments"] = this.isAllowComments;
        data["isPraise"] = this.isPraise;
        data["isTop"] = this.isTop;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): TalksPageOutput {
        const json = this.toJSON();
        let result = new TalksPageOutput();
        result.init(json);
        return result;
    }
}

export interface ITalksPageOutput {
    /** 主键 */
    id: string;
    status: AvailabilityStatus;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 是否置顶 */
    isTop: boolean;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;
}

export class TalksPageOutputPageResult implements ITalksPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TalksPageOutput[] | undefined;

    constructor(data?: ITalksPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(TalksPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TalksPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TalksPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): TalksPageOutputPageResult {
        const json = this.toJSON();
        let result = new TalksPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface ITalksPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TalksPageOutput[] | undefined;
}

export class TalksPageQueryInput implements ITalksPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 关键词 */
    keyword: string | undefined;

    constructor(data?: ITalksPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.keyword = _data["keyword"];
        }
    }

    static fromJS(data: any): TalksPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new TalksPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["keyword"] = this.keyword;
        return data;
    }

    clone(): TalksPageQueryInput {
        const json = this.toJSON();
        let result = new TalksPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface ITalksPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 关键词 */
    keyword: string | undefined;
}

export class TreeSelectOutput implements ITreeSelectOutput {
    label: string | undefined;
    value: any | undefined;
    children: TreeSelectOutput[] | undefined;

    constructor(data?: ITreeSelectOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children.push(TreeSelectOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TreeSelectOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TreeSelectOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }

    clone(): TreeSelectOutput {
        const json = this.toJSON();
        let result = new TreeSelectOutput();
        result.init(json);
        return result;
    }
}

export interface ITreeSelectOutput {
    label: string | undefined;
    value: any | undefined;
    children: TreeSelectOutput[] | undefined;
}

export class UpdateCategoryInput implements IUpdateCategoryInput {
    /** 栏目名称 */
    name: string | undefined;
    /** 父级id */
    parentId: number | undefined;
    /** 封面图 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 栏目ID */
    id: string;

    constructor(data?: IUpdateCategoryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.cover = _data["cover"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateCategoryInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCategoryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["cover"] = this.cover;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        data["id"] = this.id;
        return data;
    }

    clone(): UpdateCategoryInput {
        const json = this.toJSON();
        let result = new UpdateCategoryInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateCategoryInput {
    /** 栏目名称 */
    name: string | undefined;
    /** 父级id */
    parentId: number | undefined;
    /** 封面图 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 栏目ID */
    id: string;
}

export class UpdateCurrentUserInput implements IUpdateCurrentUserInput {
    /** 姓名 */
    name: string;
    gender: Gender;
    /** 昵称 */
    nickName: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    /** 邮箱 */
    email: string | undefined;

    constructor(data?: IUpdateCurrentUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.nickName = _data["nickName"];
            this.birthday = _data["birthday"] ? moment(_data["birthday"].toString()) : <any>undefined;
            this.mobile = _data["mobile"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UpdateCurrentUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCurrentUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["nickName"] = this.nickName;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["mobile"] = this.mobile;
        data["email"] = this.email;
        return data;
    }

    clone(): UpdateCurrentUserInput {
        const json = this.toJSON();
        let result = new UpdateCurrentUserInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateCurrentUserInput {
    /** 姓名 */
    name: string;
    gender: Gender;
    /** 昵称 */
    nickName: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    /** 邮箱 */
    email: string | undefined;
}

export class UpdateCustomConfigInput implements IUpdateCustomConfigInput {
    /** 配置名称 */
    name: string;
    /** 配置唯一编码（类名） */
    code: string;
    /** 是否是多项（集合） */
    isMultiple: boolean;
    /** 是否允许创建实体 */
    allowCreationEntity: boolean;
    status: AvailabilityStatus;
    /** 备注 */
    remark: string | undefined;
    /** 配置id */
    id: string;

    constructor(data?: IUpdateCustomConfigInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.isMultiple = _data["isMultiple"];
            this.allowCreationEntity = _data["allowCreationEntity"];
            this.status = _data["status"];
            this.remark = _data["remark"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateCustomConfigInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomConfigInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["isMultiple"] = this.isMultiple;
        data["allowCreationEntity"] = this.allowCreationEntity;
        data["status"] = this.status;
        data["remark"] = this.remark;
        data["id"] = this.id;
        return data;
    }

    clone(): UpdateCustomConfigInput {
        const json = this.toJSON();
        let result = new UpdateCustomConfigInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateCustomConfigInput {
    /** 配置名称 */
    name: string;
    /** 配置唯一编码（类名） */
    code: string;
    /** 是否是多项（集合） */
    isMultiple: boolean;
    /** 是否允许创建实体 */
    allowCreationEntity: boolean;
    status: AvailabilityStatus;
    /** 备注 */
    remark: string | undefined;
    /** 配置id */
    id: string;
}

export class UpdateCustomConfigItemInput implements IUpdateCustomConfigItemInput {
    /** 自定义配置Id */
    configId: string;
    /** 配置 */
    json: string;
    id: string;

    constructor(data?: IUpdateCustomConfigItemInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.configId = _data["configId"];
            this.json = _data["json"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateCustomConfigItemInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomConfigItemInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["configId"] = this.configId;
        data["json"] = this.json;
        data["id"] = this.id;
        return data;
    }

    clone(): UpdateCustomConfigItemInput {
        const json = this.toJSON();
        let result = new UpdateCustomConfigItemInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateCustomConfigItemInput {
    /** 自定义配置Id */
    configId: string;
    /** 配置 */
    json: string;
    id: string;
}

export class UpdateOrgInput implements IUpdateOrgInput {
    /** 父级Id */
    parentId: string | undefined;
    /** 部门名称 */
    name: string;
    /** 部门编码 */
    code: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 部门Id */
    id: string | undefined;

    constructor(data?: IUpdateOrgInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentId = _data["parentId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateOrgInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOrgInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        data["id"] = this.id;
        return data;
    }

    clone(): UpdateOrgInput {
        const json = this.toJSON();
        let result = new UpdateOrgInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateOrgInput {
    /** 父级Id */
    parentId: string | undefined;
    /** 部门名称 */
    name: string;
    /** 部门编码 */
    code: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 部门Id */
    id: string | undefined;
}

export class UpdateSysMenuInput implements IUpdateSysMenuInput {
    /** 菜单名称 */
    name: string;
    type: MenuType;
    /** 权限编码 */
    code: string | undefined;
    /** 父级菜单 */
    parentId: string | undefined;
    /** 路由名 */
    routeName: string | undefined;
    /** 路由地址 */
    path: string | undefined;
    /** 组件路径 */
    component: string | undefined;
    /** 重定向地址 */
    redirect: string | undefined;
    /** 菜单图标 */
    icon: string | undefined;
    /** 是否内嵌页面 */
    isIframe: boolean;
    /** 外链地址 */
    link: string | undefined;
    /** 是否可见 */
    isVisible: boolean;
    /** 是否缓存 */
    isKeepAlive: boolean;
    /** 是否固定 */
    isFixed: boolean;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 菜单/按钮Id */
    id: string;

    constructor(data?: IUpdateSysMenuInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.routeName = _data["routeName"];
            this.path = _data["path"];
            this.component = _data["component"];
            this.redirect = _data["redirect"];
            this.icon = _data["icon"];
            this.isIframe = _data["isIframe"];
            this.link = _data["link"];
            this.isVisible = _data["isVisible"];
            this.isKeepAlive = _data["isKeepAlive"];
            this.isFixed = _data["isFixed"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateSysMenuInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSysMenuInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["routeName"] = this.routeName;
        data["path"] = this.path;
        data["component"] = this.component;
        data["redirect"] = this.redirect;
        data["icon"] = this.icon;
        data["isIframe"] = this.isIframe;
        data["link"] = this.link;
        data["isVisible"] = this.isVisible;
        data["isKeepAlive"] = this.isKeepAlive;
        data["isFixed"] = this.isFixed;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        data["id"] = this.id;
        return data;
    }

    clone(): UpdateSysMenuInput {
        const json = this.toJSON();
        let result = new UpdateSysMenuInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateSysMenuInput {
    /** 菜单名称 */
    name: string;
    type: MenuType;
    /** 权限编码 */
    code: string | undefined;
    /** 父级菜单 */
    parentId: string | undefined;
    /** 路由名 */
    routeName: string | undefined;
    /** 路由地址 */
    path: string | undefined;
    /** 组件路径 */
    component: string | undefined;
    /** 重定向地址 */
    redirect: string | undefined;
    /** 菜单图标 */
    icon: string | undefined;
    /** 是否内嵌页面 */
    isIframe: boolean;
    /** 外链地址 */
    link: string | undefined;
    /** 是否可见 */
    isVisible: boolean;
    /** 是否缓存 */
    isKeepAlive: boolean;
    /** 是否固定 */
    isFixed: boolean;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 菜单/按钮Id */
    id: string;
}

export class UpdateSysRoleInput implements IUpdateSysRoleInput {
    /** 角色名称 */
    name: string;
    status: AvailabilityStatus;
    /** 角色编码 */
    code: string;
    /** 排序值 */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 授权按钮菜单Id */
    menus: string[];
    /** 角色Id */
    id: string | undefined;

    constructor(data?: IUpdateSysRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.menus = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.status = _data["status"];
            this.code = _data["code"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["menus"])) {
                this.menus = [] as any;
                for (let item of _data["menus"])
                    this.menus.push(item);
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateSysRoleInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSysRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["status"] = this.status;
        data["code"] = this.code;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        if (Array.isArray(this.menus)) {
            data["menus"] = [];
            for (let item of this.menus)
                data["menus"].push(item);
        }
        data["id"] = this.id;
        return data;
    }

    clone(): UpdateSysRoleInput {
        const json = this.toJSON();
        let result = new UpdateSysRoleInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateSysRoleInput {
    /** 角色名称 */
    name: string;
    status: AvailabilityStatus;
    /** 角色编码 */
    code: string;
    /** 排序值 */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 授权按钮菜单Id */
    menus: string[];
    /** 角色Id */
    id: string | undefined;
}

export class UpdateUserInput implements IUpdateUserInput {
    /** 用户名 */
    userName: string;
    /** 姓名 */
    name: string;
    gender: Gender;
    /** 组织机构id */
    orgId: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    status: AvailabilityStatus;
    /** 邮箱 */
    email: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 角色 */
    roles: string[] | undefined;
    /** 用户Id */
    id: string | undefined;

    constructor(data?: IUpdateUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.orgId = _data["orgId"];
            this.nickName = _data["nickName"];
            this.birthday = _data["birthday"] ? moment(_data["birthday"].toString()) : <any>undefined;
            this.mobile = _data["mobile"];
            this.status = _data["status"];
            this.email = _data["email"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles.push(item);
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): UpdateUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["orgId"] = this.orgId;
        data["nickName"] = this.nickName;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["mobile"] = this.mobile;
        data["status"] = this.status;
        data["email"] = this.email;
        data["remark"] = this.remark;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["id"] = this.id;
        return data;
    }

    clone(): UpdateUserInput {
        const json = this.toJSON();
        let result = new UpdateUserInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateUserInput {
    /** 用户名 */
    userName: string;
    /** 姓名 */
    name: string;
    gender: Gender;
    /** 组织机构id */
    orgId: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    status: AvailabilityStatus;
    /** 邮箱 */
    email: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 角色 */
    roles: string[] | undefined;
    /** 用户Id */
    id: string | undefined;
}

export class UploadFileOutput implements IUploadFileOutput {
    /** 文件名 */
    name: string | undefined;
    /** 附件链接 */
    url: string | undefined;

    constructor(data?: IUploadFileOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): UploadFileOutput {
        data = typeof data === 'object' ? data : {};
        let result = new UploadFileOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }

    clone(): UploadFileOutput {
        const json = this.toJSON();
        let result = new UploadFileOutput();
        result.init(json);
        return result;
    }
}

export interface IUploadFileOutput {
    /** 文件名 */
    name: string | undefined;
    /** 附件链接 */
    url: string | undefined;
}

export class UserInfoOutput implements IUserInfoOutput {
    /** Id */
    id: string | undefined;
    /** 姓名 */
    name: string | undefined;
    /** 账户名 */
    userName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 邮箱 */
    email: string | undefined;
    gender: Gender;
    /** 昵称 */
    nickName: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 最后登录ip */
    lastLoginIp: string | undefined;
    /** 最后登录IP所属地址 */
    lastLoginAddress: string | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    /** 机构id */
    orgId: string | undefined;
    /** 机构名称 */
    orgName: string | undefined;
    /** 授权按钮 */
    authBtnList: string[] | undefined;

    constructor(data?: IUserInfoOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.userName = _data["userName"];
            this.avatar = _data["avatar"];
            this.birthday = _data["birthday"] ? moment(_data["birthday"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.gender = _data["gender"];
            this.nickName = _data["nickName"];
            this.remark = _data["remark"];
            this.lastLoginIp = _data["lastLoginIp"];
            this.lastLoginAddress = _data["lastLoginAddress"];
            this.mobile = _data["mobile"];
            this.orgId = _data["orgId"];
            this.orgName = _data["orgName"];
            if (Array.isArray(_data["authBtnList"])) {
                this.authBtnList = [] as any;
                for (let item of _data["authBtnList"])
                    this.authBtnList.push(item);
            }
        }
    }

    static fromJS(data: any): UserInfoOutput {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["avatar"] = this.avatar;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["gender"] = this.gender;
        data["nickName"] = this.nickName;
        data["remark"] = this.remark;
        data["lastLoginIp"] = this.lastLoginIp;
        data["lastLoginAddress"] = this.lastLoginAddress;
        data["mobile"] = this.mobile;
        data["orgId"] = this.orgId;
        data["orgName"] = this.orgName;
        if (Array.isArray(this.authBtnList)) {
            data["authBtnList"] = [];
            for (let item of this.authBtnList)
                data["authBtnList"].push(item);
        }
        return data;
    }

    clone(): UserInfoOutput {
        const json = this.toJSON();
        let result = new UserInfoOutput();
        result.init(json);
        return result;
    }
}

export interface IUserInfoOutput {
    /** Id */
    id: string | undefined;
    /** 姓名 */
    name: string | undefined;
    /** 账户名 */
    userName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 邮箱 */
    email: string | undefined;
    gender: Gender;
    /** 昵称 */
    nickName: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 最后登录ip */
    lastLoginIp: string | undefined;
    /** 最后登录IP所属地址 */
    lastLoginAddress: string | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    /** 机构id */
    orgId: string | undefined;
    /** 机构名称 */
    orgName: string | undefined;
    /** 授权按钮 */
    authBtnList: string[] | undefined;
}

export class UserPageOutput implements IUserPageOutput {
    id: string | undefined;
    /** 姓名 */
    name: string | undefined;
    status: AvailabilityStatus;
    /** 账户名 */
    userName: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    gender: Gender;
    /** 昵称 */
    nickName: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    /** 邮箱 */
    email: string | undefined;

    constructor(data?: IUserPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.status = _data["status"];
            this.userName = _data["userName"];
            this.birthday = _data["birthday"] ? moment(_data["birthday"].toString()) : <any>undefined;
            this.mobile = _data["mobile"];
            this.gender = _data["gender"];
            this.nickName = _data["nickName"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UserPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new UserPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["status"] = this.status;
        data["userName"] = this.userName;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["mobile"] = this.mobile;
        data["gender"] = this.gender;
        data["nickName"] = this.nickName;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["email"] = this.email;
        return data;
    }

    clone(): UserPageOutput {
        const json = this.toJSON();
        let result = new UserPageOutput();
        result.init(json);
        return result;
    }
}

export interface IUserPageOutput {
    id: string | undefined;
    /** 姓名 */
    name: string | undefined;
    status: AvailabilityStatus;
    /** 账户名 */
    userName: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    gender: Gender;
    /** 昵称 */
    nickName: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
    /** 邮箱 */
    email: string | undefined;
}

export class UserPageOutputPageResult implements IUserPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: UserPageOutput[] | undefined;

    constructor(data?: IUserPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(UserPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): UserPageOutputPageResult {
        const json = this.toJSON();
        let result = new UserPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IUserPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: UserPageOutput[] | undefined;
}

export class ZFantasyToken implements IZFantasyToken {
    accessToken: string | undefined;
    refreshToken: string | undefined;
    redirectUrl: string | undefined;

    constructor(data?: IZFantasyToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"];
            this.redirectUrl = _data["redirectUrl"];
        }
    }

    static fromJS(data: any): ZFantasyToken {
        data = typeof data === 'object' ? data : {};
        let result = new ZFantasyToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        data["redirectUrl"] = this.redirectUrl;
        return data;
    }

    clone(): ZFantasyToken {
        const json = this.toJSON();
        let result = new ZFantasyToken();
        result.init(json);
        return result;
    }
}

export interface IZFantasyToken {
    accessToken: string | undefined;
    refreshToken: string | undefined;
    redirectUrl: string | undefined;
}

export class ZUserInfo implements IZUserInfo {
    id: string | undefined;
    creatorId: string | undefined;
    creationTime: moment.Moment | undefined;
    deleterId: string | undefined;
    deletionTime: moment.Moment | undefined;
    isDeleted: boolean | undefined;
    name: string | undefined;
    userName: string | undefined;
    passWord: string | undefined;
    orgId: string | undefined;
    gender: Gender;
    avatar: string | undefined;
    mobile: string | undefined;
    birthday: moment.Moment | undefined;
    email: string | undefined;
    status: AvailabilityStatus;
    lastLoginIp: string | undefined;
    lastLoginAddress: string | undefined;
    lockExpired: moment.Moment | undefined;

    constructor(data?: IZUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorId = _data["creatorId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.deleterId = _data["deleterId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
            this.name = _data["name"];
            this.userName = _data["userName"];
            this.passWord = _data["passWord"];
            this.orgId = _data["orgId"];
            this.gender = _data["gender"];
            this.avatar = _data["avatar"];
            this.mobile = _data["mobile"];
            this.birthday = _data["birthday"] ? moment(_data["birthday"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.status = _data["status"];
            this.lastLoginIp = _data["lastLoginIp"];
            this.lastLoginAddress = _data["lastLoginAddress"];
            this.lockExpired = _data["lockExpired"] ? moment(_data["lockExpired"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ZUserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ZUserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorId"] = this.creatorId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["deleterId"] = this.deleterId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["passWord"] = this.passWord;
        data["orgId"] = this.orgId;
        data["gender"] = this.gender;
        data["avatar"] = this.avatar;
        data["mobile"] = this.mobile;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["status"] = this.status;
        data["lastLoginIp"] = this.lastLoginIp;
        data["lastLoginAddress"] = this.lastLoginAddress;
        data["lockExpired"] = this.lockExpired ? this.lockExpired.toISOString() : <any>undefined;
        return data;
    }

    clone(): ZUserInfo {
        const json = this.toJSON();
        let result = new ZUserInfo();
        result.init(json);
        return result;
    }
}

export interface IZUserInfo {
    id: string | undefined;
    creatorId: string | undefined;
    creationTime: moment.Moment | undefined;
    deleterId: string | undefined;
    deletionTime: moment.Moment | undefined;
    isDeleted: boolean | undefined;
    name: string | undefined;
    userName: string | undefined;
    passWord: string | undefined;
    orgId: string | undefined;
    gender: Gender;
    avatar: string | undefined;
    mobile: string | undefined;
    birthday: moment.Moment | undefined;
    email: string | undefined;
    status: AvailabilityStatus;
    lastLoginIp: string | undefined;
    lastLoginAddress: string | undefined;
    lockExpired: moment.Moment | undefined;
}

export class ZUserInfoDto implements IZUserInfoDto {
    id: string | undefined;
    /** 昵称 */
    name: string | undefined;
    /** 账号 */
    userName: string | undefined;
    /** 密码 */
    passWord: string | undefined;
    /** 验证码 */
    code: string | undefined;

    constructor(data?: IZUserInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.userName = _data["userName"];
            this.passWord = _data["passWord"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ZUserInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ZUserInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["passWord"] = this.passWord;
        data["code"] = this.code;
        return data;
    }

    clone(): ZUserInfoDto {
        const json = this.toJSON();
        let result = new ZUserInfoDto();
        result.init(json);
        return result;
    }
}

export interface IZUserInfoDto {
    id: string | undefined;
    /** 昵称 */
    name: string | undefined;
    /** 账号 */
    userName: string | undefined;
    /** 密码 */
    passWord: string | undefined;
    /** 验证码 */
    code: string | undefined;
}

export class ZUserInfoOutput implements IZUserInfoOutput {
    /** 姓名 */
    name: string | undefined;
    /** 账户名 */
    userName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 邮箱 */
    email: string | undefined;
    gender: Gender;
    /** 昵称 */
    nickName: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 最后登录ip */
    lastLoginIp: string | undefined;
    /** 最后登录IP所属地址 */
    lastLoginAddress: string | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    /** 机构id */
    orgId: string | undefined;
    /** 机构名称 */
    orgName: string | undefined;
    /** 授权按钮 */
    authBtnList: string[] | undefined;

    constructor(data?: IZUserInfoOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.userName = _data["userName"];
            this.avatar = _data["avatar"];
            this.birthday = _data["birthday"] ? moment(_data["birthday"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.gender = _data["gender"];
            this.nickName = _data["nickName"];
            this.remark = _data["remark"];
            this.lastLoginIp = _data["lastLoginIp"];
            this.lastLoginAddress = _data["lastLoginAddress"];
            this.mobile = _data["mobile"];
            this.orgId = _data["orgId"];
            this.orgName = _data["orgName"];
            if (Array.isArray(_data["authBtnList"])) {
                this.authBtnList = [] as any;
                for (let item of _data["authBtnList"])
                    this.authBtnList.push(item);
            }
        }
    }

    static fromJS(data: any): ZUserInfoOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ZUserInfoOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["avatar"] = this.avatar;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["gender"] = this.gender;
        data["nickName"] = this.nickName;
        data["remark"] = this.remark;
        data["lastLoginIp"] = this.lastLoginIp;
        data["lastLoginAddress"] = this.lastLoginAddress;
        data["mobile"] = this.mobile;
        data["orgId"] = this.orgId;
        data["orgName"] = this.orgName;
        if (Array.isArray(this.authBtnList)) {
            data["authBtnList"] = [];
            for (let item of this.authBtnList)
                data["authBtnList"].push(item);
        }
        return data;
    }

    clone(): ZUserInfoOutput {
        const json = this.toJSON();
        let result = new ZUserInfoOutput();
        result.init(json);
        return result;
    }
}

export interface IZUserInfoOutput {
    /** 姓名 */
    name: string | undefined;
    /** 账户名 */
    userName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    /** 生日 */
    birthday: moment.Moment | undefined;
    /** 邮箱 */
    email: string | undefined;
    gender: Gender;
    /** 昵称 */
    nickName: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 最后登录ip */
    lastLoginIp: string | undefined;
    /** 最后登录IP所属地址 */
    lastLoginAddress: string | undefined;
    /** 手机号码 */
    mobile: string | undefined;
    /** 机构id */
    orgId: string | undefined;
    /** 机构名称 */
    orgName: string | undefined;
    /** 授权按钮 */
    authBtnList: string[] | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
